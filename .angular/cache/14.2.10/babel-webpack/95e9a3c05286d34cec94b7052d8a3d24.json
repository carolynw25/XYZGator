{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nlet CardComponent = class CardComponent {\n  constructor() {\n    this.cards = [];\n    this.disableCards = false;\n    this.minutes = 0;\n    this.seconds = 0;\n    this.lowestTime = null;\n    const cardColors = ['red', 'green', 'blue', 'yellow', 'orange', 'black', 'purple', 'violet', 'gray', 'lime', 'white', 'teal', 'pink', 'brown'];\n    const uniqueCards = []; //start timer\n\n    this.stopTimer();\n    this.startTimer(); // Generate unique pairs of cards\n\n    for (let i = 1; i <= cardColors.length; i++) {\n      const color = cardColors[i - 1];\n      const card1 = {\n        id: i * 2 - 1,\n        color,\n        isFlipped: false,\n        isMatched: false\n      };\n      const card2 = {\n        id: i * 2,\n        color,\n        isFlipped: false,\n        isMatched: false\n      };\n      uniqueCards.push(card1, card2);\n    } // Shuffle cards\n\n\n    this.cards = this.shuffle(uniqueCards);\n  }\n\n  flipCard(card) {\n    if (!card.isMatched && !this.disableCards) {\n      card.isFlipped = !card.isFlipped;\n      const flippedCards = this.cards.filter(c => c.isFlipped && !c.isMatched);\n\n      if (flippedCards.length === 2) {\n        if (flippedCards[0].color === flippedCards[1].color) {\n          flippedCards.forEach(c => c.isMatched = true);\n\n          if (this.cards.every(card => card.isMatched)) {\n            // Update lowest time if necessary\n            // update lowestTime if current time is lower than previous time\n            if (this.lowestTime === null || this.minutes < this.lowestTime.minutes || this.minutes === this.lowestTime.minutes && this.seconds < this.lowestTime.seconds) {\n              this.lowestTime = {\n                minutes: this.minutes,\n                seconds: this.seconds\n              };\n            } // Show win popup with time here\n\n\n            clearInterval(this.timer);\n            setTimeout(() => {\n              Swal.fire({\n                title: 'Congratulations, you won!',\n                text: `You won in ${this.minutes}:${this.seconds < 10 ? '0' : ''}${this.seconds}!`,\n                icon: 'success',\n                confirmButtonColor: '#3085d6',\n                confirmButtonText: 'OK',\n                padding: '3em',\n                color: '#716add',\n                //background: '#fab url(\"assets/img/cuteGator.png\")',\n                backdrop: `\n                  rgba(0,0,123,0.4)\n                  url(\"assets/img/nyan-cat-gif.webp\")\n                  left top\n                  no-repeat\n                `\n              });\n            }, 1000);\n          }\n        } else {\n          this.disableCards = true;\n          setTimeout(() => {\n            flippedCards.forEach(c => c.isFlipped = false);\n            this.disableCards = false;\n          }, 1000);\n        }\n      }\n    }\n  }\n\n  shuffle(array) {\n    let currentIndex = array.length,\n        randomIndex;\n\n    while (currentIndex != 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex--;\n      [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\n    }\n\n    return array;\n  }\n\n  reset() {\n    this.cards.forEach(card => {\n      card.isFlipped = false;\n      card.isMatched = false;\n    });\n    this.cards = this.shuffle(this.cards);\n    this.disableCards = false;\n    this.stopTimer();\n    this.startTimer();\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      if (this.seconds < 59) {\n        this.seconds++;\n      } else {\n        this.minutes++;\n        this.seconds = 0;\n      }\n    }, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n};\nCardComponent = __decorate([Component({\n  selector: 'app-card',\n  template: `\n<div class =\"outer\">\n  <div class=\"top-bar\">\n    <div class \n    <div *ngIf=\"lowestTime !== null\" class=\"lowest-time\"> lowestTime: {{ lowestTime.minutes }}:{{ lowestTime.seconds | number: '2.0' }}</div>\n    <div *ngIf=\"lowestTime == null\" class=\"lowest-time\"> lowestTime: </div>\n    <div class=\"reset\">\n      <button (click)=\"reset()\">Reset</button>\n    </div>\n    <div class=\"timer\"> timer: {{ minutes }}:{{ seconds | number: '2.0' }}</div>\n    <div class=\"return\">\n      <button routerLink=\"/notifications\">Return</button>\n    </div>\n  </div>\n  <div class=\"cards\">\n    <div class=\"card\" [class.flipped]=\"card.isFlipped\" *ngFor=\"let card of cards\" (click)=\"flipCard(card)\" [ngStyle]=\"{ 'background-color': !card.isFlipped ? card.color : ''}\">\n      <div class=\"card-content\">\n        <h2 *ngIf=\"card.isFlipped\">{{ card.color }}</h2>\n      </div>\n      <div class=\"card-inner\">\n        <div class=\"card-front\">\n        </div>\n        <div class=\"card-back\" >\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n `,\n  styles: [`\n    .outer {\n      padding: 20px;\n      min-height: 100vh;\n      background-color: lavender;\n    }\n    .top-bar {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n    }\n    .timer {\n      font-size: 2rem;\n      text-align: left;\n      justify-content: flex-start;\n    }\n    .reset{\n      font-size: 2rem;\n      margin-right: 20px;\n      justify-content: center;\n    }\n    .return{\n      font-size: 2rem;\n      margin-right: 20px;\n      justify-content: flex-end;\n    }\n\n   .cards {\n     display: grid;\n     grid-template-columns: repeat(auto-fit, minmax(170px, 1fr));\n     gap: 1px;\n     margin: 50px;\n     margin-top: 40px;\n   }\n\n\n   .card {\n     width: 130px;\n     height: 130px;\n     position: relative;\n     perspective: 1000px;\n     cursor: pointer;\n     background-color: rgb(243, 242, 239);\n   }\n\n\n   .card-inner {\n     position: absolute;\n     width: 100%;\n     height: 100%;\n     transform-style: preserve-3d;\n     transition: transform 0.5s;\n   }\n\n\n   .card-front,\n   .card-back {\n     position: absolute;\n     top: 0;\n     left: 0;\n     width: 100%;\n     height: 100%;\n     backface-visibility: hidden;\n     transform-style: preserve-3d;\n     transition: all 0.5s ease-in-out;\n   }\n\n\n   .card-front {\n     transform: rotateY(0deg);\n     z-index: 2;\n   }\n\n\n   .card-back {\n     transform: rotateY(180deg);\n     z-index: 1;\n   }\n\n\n   .card.flipped .card-inner {\n     transform: rotateY(180deg);\n   }\n\n\n   .card.flipped .card-front {\n     z-index: 1;\n   }\n\n\n   .card.flipped .card-back {\n     transform: rotateY(0deg);\n     z-index: 2;\n   }\n\n\n   .card-content {\n     padding: 0rem;\n     position: relative;\n     z-index: 1;\n   }\n\n   .card-content h2 {\n    background-color: rgb(243, 242, 239);\n    color: black;\n    text-align: center;\n    padding: 0.07rem;\n    font-size: 1.5rem;\n    margin-bottom: 0.5rem;\n   }\n\n   /* Shadow effect */\n   .card-front::before,\n   .card-back::before {\n     content: \"\";\n     position: absolute;\n     top: 0;\n     left: 0;\n     width: 100%;\n     height: 100%;\n     box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);\n     z-index: -1;\n     transition: all 0.5s ease-in-out;\n   }\n\n\n   .card-front::before {\n     transform: translateZ(-5px);\n   }\n\n\n   .card-back::before {\n     transform: translateZ(5px);\n   }\n `]\n}), __metadata(\"design:paramtypes\", [])], CardComponent);\nexport { CardComponent };","map":null,"metadata":{},"sourceType":"module"}