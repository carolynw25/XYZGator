{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WordSearchComponent = class WordSearchComponent {\n  constructor() {\n    this.words = ['HHHHH', 'ZZZZZZZ', 'PPPPPPP'];\n    this.grid = [];\n    this.columnNum = 20;\n    this.rowNum = 10; // Variables to store the starting and ending positions of the highlight\n\n    this.startRow = null;\n    this.startCol = null;\n    this.endRow = null;\n    this.endCol = null;\n    this.direction = null;\n    this.length = null;\n    this.coords = [];\n    this.start = false;\n    this.highlightedWords = []; // selectLetter(rowIndex: number, colIndex: number): void {\n    //   if (this.selectedStartIndex === null) {\n    //     // Set the start index if it hasn't been set yet\n    //     this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n    //     this.startRow = rowIndex;\n    //     this.startCol = colIndex;\n    //     // Set the end index to be the same as the start index\n    //     this.selectedEndIndex = this.selectedStartIndex;\n    //     this.endRow = this.startRow;\n    //     this.endCol = this.startCol;\n    //   } else {\n    //     // Set the end index\n    //     this.selectedEndIndex = colIndex + rowIndex * this.columnNum;\n    //     this.endRow = rowIndex;\n    //     this.endCol = colIndex;\n    //   }\n    // }\n    // isSelected(rowIndex: number, colIndex: number): boolean {\n    //   if (this.selectedStartIndex === null || this.selectedEndIndex === null) {\n    //     return false;\n    //   }\n    //   const index = colIndex + rowIndex * this.columnNum;\n    //   if (index < this.selectedStartIndex || index > this.selectedEndIndex) {\n    //     return false;\n    //   }\n    //   // Determine the row and column of the start and end positions\n    //   const startRow = Math.floor(this.selectedStartIndex / this.columnNum);\n    //   const startCol = this.selectedStartIndex % this.columnNum;\n    //   const endRow = Math.floor(this.selectedEndIndex / this.columnNum);\n    //   const endCol = this.selectedEndIndex % this.columnNum;\n    //   // Check if the cell is on the same row or column as the start or end position\n    //   if (rowIndex === startRow && rowIndex === endRow) {\n    //     return colIndex >= startCol && colIndex <= endCol;\n    //   } else if (colIndex === startCol && colIndex === endCol) {\n    //     return rowIndex >= startRow && rowIndex <= endRow;\n    //   }\n    //   // Check if the cell is on the diagonal line between the start and end positions\n    //   const rowDiff = Math.abs(rowIndex - startRow);\n    //   const colDiff = Math.abs(colIndex - startCol);\n    //   if (rowDiff === colDiff) {\n    //     const rowStep = rowIndex < startRow ? -1 : 1;\n    //     const colStep = colIndex < startCol ? -1 : 1;\n    //     let row = startRow + rowStep;\n    //     let col = startCol + colStep;\n    //     while (row !== endRow && col !== endCol) {\n    //       if (row === rowIndex && col === colIndex) {\n    //         return true;\n    //       }\n    //       row += rowStep;\n    //       col += colStep;\n    //     }\n    //   }\n    //   return false;\n    // }\n  }\n\n  ngOnInit() {\n    this.generateGrid();\n  }\n\n  canPlaceWord(word, startX, startY, directionX, directionY) {\n    // Check if the word can be placed in the grid\n    const positions = [];\n    let x = startX;\n    let y = startY;\n\n    for (const letter of word) {\n      if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n        return null;\n      }\n\n      positions.push([y, x]);\n      x += directionX;\n      y += directionY;\n    }\n\n    return positions;\n  }\n\n  generateGrid() {\n    // Generate an empty grid of letters\n    for (let i = 0; i < this.rowNum; i++) {\n      this.grid.push([]);\n\n      for (let j = 0; j < this.columnNum; j++) {\n        this.grid[i].push('');\n      }\n    } // Place each word in the grid (if possible)\n\n\n    let allWordsPlaced = false;\n\n    while (!allWordsPlaced) {\n      allWordsPlaced = true;\n\n      for (let word of this.words) {\n        let wordPlaced = false; // Try to place the word in the grid in all possible directions\n\n        for (let directionX = -1; directionX <= 1 && !wordPlaced; directionX++) {\n          for (let directionY = -1; directionY <= 1 && !wordPlaced; directionY++) {\n            if (directionX === 0 && directionY === 0) {\n              continue;\n            } // Generate a random starting position for the word in the current direction\n\n\n            const startX = Math.floor(Math.random() * this.rowNum);\n            const startY = Math.floor(Math.random() * this.columnNum);\n            const positions = this.canPlaceWord(word, startX, startY, directionX, directionY); // If the word can be placed, place it in the grid\n\n            if (positions) {\n              let canPlace = true;\n\n              for (const [y, x] of positions) {\n                if (this.grid[y][x] !== '') {\n                  canPlace = false;\n                  break;\n                }\n              }\n\n              if (canPlace) {\n                for (const [y, x] of positions) {\n                  this.grid[y][x] = word.charAt(0).toUpperCase();\n                  word = word.slice(1);\n                }\n\n                wordPlaced = true;\n              }\n            }\n          }\n        } // If the word couldn't be placed, reset the grid and start over\n\n\n        if (!wordPlaced) {\n          allWordsPlaced = false;\n          this.grid = [];\n\n          for (let i = 0; i < this.rowNum; i++) {\n            this.grid.push([]);\n\n            for (let j = 0; j < this.columnNum; j++) {\n              this.grid[i].push('');\n            }\n          }\n\n          break;\n        }\n      }\n    } // Fill the remaining empty spaces with random letters\n\n\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    for (let i = 0; i < this.rowNum; i++) {\n      for (let j = 0; j < this.columnNum; j++) {\n        if (this.grid[i][j] === '') {\n          const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\n          this.grid[i][j] = randomLetter;\n        }\n      }\n    }\n  } // selectLetter(rowIndex: number, colIndex: number): void {\n  //   if (this.selectedStartIndex === null) {\n  //     // Set the start index if it hasn't been set yet\n  //     this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n  //     this.startRow = rowIndex;\n  //     this.startCol = colIndex;\n  //     // Set the end index to highlight the whole column\n  //     this.selectedEndIndex = colIndex + (this.rowNum - 1) * this.columnNum;\n  //     this.endRow = this.rowNum - 1;\n  //     this.endCol = colIndex;\n  //   } \n  //   else if (this.selectedEndIndex === null) {\n  //     // Set the end index if it hasn't been set yet\n  //     this.selectedEndIndex = colIndex + rowIndex * this.columnNum;\n  //     this.endRow = rowIndex;\n  //     this.endCol = colIndex;\n  //   } \n  //   else {\n  //     // Clear the start and end indices if both have been set\n  //     this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n  //     this.startRow = rowIndex;\n  //     this.startCol = colIndex;\n  //     this.selectedEndIndex = null;\n  //     this.endRow = null;\n  //     this.endCol = null;\n  //   }\n  // }\n\n\n  selectLetter(rowIndex, colIndex) {\n    console.log('row:' + rowIndex);\n    console.log('column: ' + colIndex);\n    let newWord = '';\n    this.length = 5;\n    this.direction = 0;\n\n    if (this.start === false) {\n      //start point\n      this.start = true;\n      this.startRow = rowIndex;\n      this.startCol = colIndex;\n    } else {\n      //end point\n      this.start = false;\n      this.endRow = rowIndex;\n      this.endCol = colIndex; //find direction and length\n\n      if (this.startRow !== this.endRow && this.startCol === this.endCol) {\n        //vertical\n        this.direction = 0;\n        this.length = this.endRow - this.startRow;\n      } else if (this.startRow === this.endRow && this.startCol !== this.endCol) {\n        //horizontal\n        this.direction = 1;\n        this.length = this.endCol - this.startCol;\n      } else if (this.endCol > this.startCol && this.endRow > this.startRow) {\n        //bottom right so down diagonal\n        this.direction = 3;\n        this.length = this.endCol - this.startCol;\n      } else if (this.endCol < this.startCol && this.endRow < this.startRow) {\n        //top left so down diagonal\n        this.direction = 3;\n        this.length = this.endCol - this.startCol;\n      } else if (this.endCol < this.startCol && this.endRow > this.startRow) {\n        //bottom left so up diagonal\n        this.direction = 2;\n        this.length = this.endCol - this.startCol;\n      } else {\n        //top right so up diagonal\n        this.direction = 2;\n        this.length = this.endCol - this.startCol;\n      } //got direction and length\n      //now we assign coords\n\n\n      if (this.direction == 0) {\n        //vertical\n        console.log(this.length);\n\n        if (this.length < 0) {\n          //up\n          for (let i = this.length; i <= 0; i++) {\n            newWord = newWord + this.grid[this.startRow + i][this.startCol];\n            this.coords.push({\n              rIndex: this.startRow + i,\n              cIndex: this.startCol\n            });\n          }\n        }\n\n        if (this.length > 0) {\n          //down\n          for (let i = 0; i <= this.length; i++) {\n            newWord = newWord + this.grid[this.startRow + i][this.startCol];\n            this.coords.push({\n              rIndex: this.startRow + i,\n              cIndex: this.startCol\n            });\n          }\n        }\n      } else if (this.direction == 1) {\n        //horizontal\n        if (this.length < 0) {\n          //left\n          for (let i = this.length; i <= 0; i++) {\n            newWord = newWord + this.grid[this.startRow][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n\n        if (this.length > 0) {\n          //right\n          for (let i = 0; i <= this.length; i++) {\n            newWord = newWord + this.grid[this.startRow][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n      } else if (this.direction == 2) {\n        //up diagonal\n        if (this.length < 0) {\n          //left\n          for (let i = this.length; i <= 0; i++) {\n            newWord = newWord + this.grid[this.startRow - i][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow - i,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n\n        if (this.length > 0) {\n          //right\n          for (let i = 0; i <= this.length; i++) {\n            newWord = newWord + this.grid[this.startRow - i][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow - i,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n      } else {\n        //down diagonal\n        if (this.length < 0) {\n          //left\n          for (let i = this.length; i <= 0; i++) {\n            newWord = newWord + this.grid[this.startRow + i][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow + i,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n\n        if (this.length > 0) {\n          //right\n          for (let i = 0; i <= this.length; i++) {\n            newWord = newWord + this.grid[this.startRow + i][this.startCol + i];\n            this.coords.push({\n              rIndex: this.startRow + i,\n              cIndex: this.startCol + i\n            });\n          }\n        }\n      }\n\n      console.log(newWord);\n      this.highlightedWords.push(newWord);\n    }\n\n    console.log('rowCord:' + this.coords[0].rIndex);\n    console.log('columnCord: ' + this.coords[0].cIndex);\n  }\n\n  isSelected(rowIndex, colIndex) {\n    if (this.coords.length !== 0) {\n      for (let i = 0; i < this.coords.length; i++) {\n        if (rowIndex === this.coords[i].rIndex && colIndex === this.coords[i].cIndex) {\n          console.log(\"Im in\");\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n};\nWordSearchComponent = __decorate([Component({\n  selector: 'app-word-search',\n  template: `\n<div class =\"outer\">\n  <h4>Words to find:</h4>\n  <ul>\n    <li *ngFor=\"let word of words\">{{ word }} {{ highlightedWords.includes(word) ? ' (found)' : '' }}</li>\n  </ul>\n  <div class=\"correct-count\">Word just highlighted: {{ highlightedWords[] }} </div>\n  <table>\n    <tr *ngFor=\"let row of grid; let i = index\">\n      <td \n      *ngFor=\"let letter of row; let j = index\"\n      [class.selected]=\"isSelected(i, j)\"\n      (click)=\"selectLetter(i, j)\">\n      {{ letter }}\n      </td>\n    </tr>\n  </table>\n  <button (click)=\"generateGrid()\">Generate new grid</button>\n  <button>Some other button</button>\n</div>\n`,\n  styles: [`\n .outer {\n   padding: 20px;\n   min-height: 100vh;\n   background-color: lavender;\n }\n td {\n  border: 1px solid #ccc;\n  padding: 5px;\n  font-size: 20px;\n  font-family: 'Arial', sans-serif;\n  background-color: #fff;\n  cursor: pointer;\n}\ntd.selected {\n  background-color: rgba(30, 30, 255, 0.314);\n}\n\n `]\n})], WordSearchComponent);\nexport { WordSearchComponent };","map":null,"metadata":{},"sourceType":"module"}