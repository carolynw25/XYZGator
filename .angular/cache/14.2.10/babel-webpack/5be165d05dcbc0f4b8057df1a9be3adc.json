{"ast":null,"code":"import Swal from 'sweetalert2';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/router\";\n\nfunction WordSearchComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1);\n    i0.ɵɵpipe(2, \"number\");\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" lowestTime: \", ctx_r0.lowestTime.minutes, \":\", i0.ɵɵpipeBind2(2, 2, ctx_r0.lowestTime.seconds, \"2.0\"), \"\");\n  }\n}\n\nfunction WordSearchComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 11);\n    i0.ɵɵtext(1, \" lowestTime: \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction WordSearchComponent_li_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"li\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const word_r4 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\"\", word_r4, \" \", ctx_r2.highlightedWords.includes(word_r4) ? \" (found)\" : \"\", \"\");\n  }\n}\n\nfunction WordSearchComponent_tr_21_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 5);\n    i0.ɵɵlistener(\"click\", function WordSearchComponent_tr_21_td_1_Template_td_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r12);\n      const j_r9 = restoredCtx.index;\n      const i_r6 = i0.ɵɵnextContext().index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.selectLetter(i_r6, j_r9));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const letter_r8 = ctx.$implicit;\n    const j_r9 = ctx.index;\n    const i_r6 = i0.ɵɵnextContext().index;\n    const ctx_r7 = i0.ɵɵnextContext();\n    i0.ɵɵclassProp(\"selected\", ctx_r7.isSelected(i_r6, j_r9));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", letter_r8, \" \");\n  }\n}\n\nfunction WordSearchComponent_tr_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, WordSearchComponent_tr_21_td_1_Template, 2, 3, \"td\", 12);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r5 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r5);\n  }\n}\n\nexport let WordSearchComponent = /*#__PURE__*/(() => {\n  class WordSearchComponent {\n    constructor() {\n      //words should be limited to 10 letters\n      this.words = ['APPLE', 'DATES', 'STRAWBERRY'];\n      this.grid = [];\n      this.columnNum = 20;\n      this.rowNum = 10; //other stuff\n\n      this.minutes = 0;\n      this.seconds = 0;\n      this.lowestTime = null;\n      this.newRecord = false; // Variables to store the starting and ending positions of the highlight\n\n      this.startRow = null;\n      this.startCol = null;\n      this.endRow = null;\n      this.endCol = null;\n      this.direction = null;\n      this.length = null;\n      this.coords = [];\n      this.start = false;\n      this.highlightedWords = [];\n      this.wordsFound = 0;\n    }\n\n    startTimer() {\n      this.timer = setInterval(() => {\n        if (this.seconds < 59) {\n          this.seconds++;\n        } else {\n          this.minutes++;\n          this.seconds = 0;\n        }\n      }, 1000);\n    }\n\n    stopTimer() {\n      clearInterval(this.timer);\n      this.minutes = 0;\n      this.seconds = 0;\n    }\n\n    ngOnInit() {\n      //start timer\n      this.stopTimer();\n      this.startTimer(); //others\n\n      this.generateGrid();\n    }\n\n    reset() {\n      //start timer\n      this.stopTimer();\n      this.startTimer();\n      this.newRecord = true; //others\n\n      this.generateGrid();\n      this.highlightedWords.splice(0, this.highlightedWords.length);\n      this.coords.splice(0);\n    }\n\n    canPlaceWord(word, startX, startY, directionX, directionY) {\n      // Check if the word can be placed in the grid\n      const positions = [];\n      let x = startX;\n      let y = startY;\n\n      for (const letter of word) {\n        if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n          return null;\n        }\n\n        positions.push([y, x]);\n        x += directionX;\n        y += directionY;\n      }\n\n      return positions;\n    }\n\n    generateGrid() {\n      // Generate an empty grid of letters\n      for (let i = 0; i < this.rowNum; i++) {\n        this.grid.push([]);\n\n        for (let j = 0; j < this.columnNum; j++) {\n          this.grid[i].push('');\n        }\n      } // Place each word in the grid (if possible)\n\n\n      let allWordsPlaced = false;\n\n      while (!allWordsPlaced) {\n        allWordsPlaced = true;\n\n        for (let word of this.words) {\n          let wordPlaced = false; // Try to place the word in the grid in all possible directions\n\n          for (let directionX = -1; directionX <= 1 && !wordPlaced; directionX++) {\n            for (let directionY = -1; directionY <= 1 && !wordPlaced; directionY++) {\n              if (directionX === 0 && directionY === 0) {\n                continue;\n              } // Generate a random starting position for the word in the current direction\n\n\n              const startX = Math.floor(Math.random() * this.rowNum);\n              const startY = Math.floor(Math.random() * this.columnNum);\n              const positions = this.canPlaceWord(word, startX, startY, directionX, directionY); // If the word can be placed, place it in the grid\n\n              if (positions) {\n                let canPlace = true;\n\n                for (const [y, x] of positions) {\n                  if (this.grid[y][x] !== '') {\n                    canPlace = false;\n                    break;\n                  }\n                }\n\n                if (canPlace) {\n                  for (const [y, x] of positions) {\n                    this.grid[y][x] = word.charAt(0).toUpperCase();\n                    word = word.slice(1);\n                  }\n\n                  wordPlaced = true;\n                }\n              }\n            }\n          } // If the word couldn't be placed, reset the grid and start over\n\n\n          if (!wordPlaced) {\n            allWordsPlaced = false;\n            this.grid = [];\n\n            for (let i = 0; i < this.rowNum; i++) {\n              this.grid.push([]);\n\n              for (let j = 0; j < this.columnNum; j++) {\n                this.grid[i].push('');\n              }\n            }\n\n            break;\n          }\n        }\n      } // Fill the remaining empty spaces with random letters\n\n\n      const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n      for (let i = 0; i < this.rowNum; i++) {\n        for (let j = 0; j < this.columnNum; j++) {\n          if (this.grid[i][j] === '') {\n            const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\n            this.grid[i][j] = randomLetter;\n          }\n        }\n      }\n    }\n\n    selectLetter(rowIndex, colIndex) {\n      // console.log('row:' + rowIndex);\n      // console.log('column: ' + colIndex);\n      let newWord = '';\n      this.length = 5;\n      this.direction = 0;\n\n      if (this.start === false) {\n        //start point\n        this.start = true;\n        this.startRow = rowIndex;\n        this.startCol = colIndex;\n      } else {\n        //end point\n        this.start = false;\n        this.endRow = rowIndex;\n        this.endCol = colIndex; //find direction and length\n\n        if (this.startRow !== this.endRow && this.startCol === this.endCol) {\n          //vertical\n          this.direction = 0;\n          this.length = this.endRow - this.startRow;\n        } else if (this.startRow === this.endRow && this.startCol !== this.endCol) {\n          //horizontal\n          this.direction = 1;\n          this.length = this.endCol - this.startCol;\n        } else if (this.endCol > this.startCol && this.endRow > this.startRow) {\n          //bottom right so down diagonal\n          this.direction = 3;\n          this.length = this.endCol - this.startCol;\n        } else if (this.endCol < this.startCol && this.endRow < this.startRow) {\n          //top left so down diagonal\n          this.direction = 3;\n          this.length = this.endCol - this.startCol;\n        } else if (this.endCol < this.startCol && this.endRow > this.startRow) {\n          //bottom left so up diagonal\n          this.direction = 2;\n          this.length = this.endCol - this.startCol;\n        } else {\n          //top right so up diagonal\n          this.direction = 2;\n          this.length = this.endCol - this.startCol;\n        }\n\n        if (this.direction === 2 || this.direction === 3) {\n          if (Math.abs(this.endCol - this.startCol) !== Math.abs(this.endRow - this.startRow)) {\n            this.highlightedWords.push(\"Incorrect Input\");\n            this.highlightedWords.push(\"Incorrect Input\");\n            return;\n          }\n        } //got direction and length\n        //now we assign coords\n\n\n        if (this.direction == 0) {\n          //vertical\n          if (this.length < 0) {\n            //up\n            for (let i = this.length; i <= 0; i++) {\n              newWord = newWord + this.grid[this.startRow + i][this.startCol];\n              this.coords.push({\n                rIndex: this.startRow + i,\n                cIndex: this.startCol\n              });\n            }\n          }\n\n          if (this.length > 0) {\n            //down\n            for (let i = 0; i <= this.length; i++) {\n              newWord = newWord + this.grid[this.startRow + i][this.startCol];\n              this.coords.push({\n                rIndex: this.startRow + i,\n                cIndex: this.startCol\n              });\n            }\n          }\n        } else if (this.direction == 1) {\n          //horizontal\n          if (this.length < 0) {\n            //left\n            for (let i = this.length; i <= 0; i++) {\n              newWord = newWord + this.grid[this.startRow][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n\n          if (this.length > 0) {\n            //right\n            for (let i = 0; i <= this.length; i++) {\n              newWord = newWord + this.grid[this.startRow][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n        } else if (this.direction == 2) {\n          //up diagonal\n          if (this.length < 0) {\n            //left\n            for (let i = this.length; i <= 0; i++) {\n              newWord = newWord + this.grid[this.startRow - i][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow - i,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n\n          if (this.length > 0) {\n            //right\n            for (let i = 0; i <= this.length; i++) {\n              newWord = newWord + this.grid[this.startRow - i][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow - i,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n        } else {\n          //down diagonal\n          if (this.length < 0) {\n            //left\n            for (let i = this.length; i <= 0; i++) {\n              newWord = newWord + this.grid[this.startRow + i][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow + i,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n\n          if (this.length > 0) {\n            //right\n            for (let i = 0; i <= this.length; i++) {\n              newWord = newWord + this.grid[this.startRow + i][this.startCol + i];\n              this.coords.push({\n                rIndex: this.startRow + i,\n                cIndex: this.startCol + i\n              });\n            }\n          }\n        }\n\n        this.highlightedWords.push(newWord);\n        this.highlightedWords.push(newWord.split(\"\").reverse().join(\"\")); //boolean in for loop\n\n        let found = false;\n\n        for (let i = 0; i <= this.words.length; i++) {\n          if (this.words[i] === newWord || this.words[i] === newWord.split(\"\").reverse().join(\"\")) {\n            found = true;\n          }\n        }\n\n        if (found === false) {\n          setTimeout(() => {\n            this.coords.splice(this.coords.length - newWord.length, newWord.length);\n          }, 1000);\n        } else {\n          //the highlight will stay\n          //check for winning condition\n          this.wordsFound++;\n\n          if (this.wordsFound == this.words.length) {\n            //winning conditions\n            // update lowestTime if current time is lower than previous time\n            if (this.lowestTime === null || this.minutes < this.lowestTime.minutes || this.minutes === this.lowestTime.minutes && this.seconds < this.lowestTime.seconds) {\n              this.lowestTime = {\n                minutes: this.minutes,\n                seconds: this.seconds\n              };\n              this.newRecord = true;\n            } // Show win popup with time here\n\n\n            clearInterval(this.timer);\n            setTimeout(() => {\n              Swal.fire({\n                title: `Congratulations, you won in ${this.minutes}:${this.seconds < 10 ? '0' : ''}${this.seconds}!`,\n                text: `Lowest Time ${this.lowestTime.minutes}:${this.lowestTime.seconds < 10 ? '0' : ''}${this.lowestTime.seconds}${this.newRecord ? ' (newwwww)' : ''}`,\n                icon: 'success',\n                confirmButtonColor: '#3085d6',\n                confirmButtonText: 'OK',\n                padding: '3em',\n                color: '#716add',\n                //background: '#fab url(\"assets/img/cuteGator.png\")',\n                ...(this.newRecord ? {\n                  backdrop: `\n              rgba(0,0,123,0.4)\n              url(\"assets/img/nyan-cat-gif.webp\")\n              left top\n              no-repeat\n            `\n                } : {})\n              });\n            }, 1000);\n          }\n        }\n      }\n    }\n\n    isSelected(rowIndex, colIndex) {\n      if (this.coords.length !== 0) {\n        for (let i = 0; i < this.coords.length; i++) {\n          if (rowIndex === this.coords[i].rIndex && colIndex === this.coords[i].cIndex) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n  }\n\n  WordSearchComponent.ɵfac = function WordSearchComponent_Factory(t) {\n    return new (t || WordSearchComponent)();\n  };\n\n  WordSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordSearchComponent,\n    selectors: [[\"app-word-search\"]],\n    decls: 22,\n    vars: 11,\n    consts: [[1, \"outer\"], [1, \"top-bar\"], [1, \"lowestTime\"], [\"class\", \"lowest-time\", 4, \"ngIf\"], [1, \"reset\"], [3, \"click\"], [1, \"timer\"], [1, \"return\"], [\"routerLink\", \"/notifications\"], [1, \"w\"], [4, \"ngFor\", \"ngForOf\"], [1, \"lowest-time\"], [3, \"selected\", \"click\", 4, \"ngFor\", \"ngForOf\"]],\n    template: function WordSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2);\n        i0.ɵɵtemplate(3, WordSearchComponent_div_3_Template, 3, 5, \"div\", 3);\n        i0.ɵɵtemplate(4, WordSearchComponent_div_4_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 4)(6, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function WordSearchComponent_Template_button_click_6_listener() {\n          return ctx.reset();\n        });\n        i0.ɵɵtext(7, \"Reset\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 6);\n        i0.ɵɵtext(9);\n        i0.ɵɵpipe(10, \"number\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"div\", 7)(12, \"button\", 8);\n        i0.ɵɵtext(13, \"Return\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"div\", 9);\n        i0.ɵɵtext(15, \"Words to find: (fruit category)\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"ul\");\n        i0.ɵɵtemplate(17, WordSearchComponent_li_17_Template, 2, 2, \"li\", 10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 9);\n        i0.ɵɵtext(19);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"table\");\n        i0.ɵɵtemplate(21, WordSearchComponent_tr_21_Template, 2, 1, \"tr\", 10);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngIf\", ctx.lowestTime !== null);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.lowestTime == null);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate2(\" timer: \", ctx.minutes, \":\", i0.ɵɵpipeBind2(10, 8, ctx.seconds, \"2.0\"), \"\");\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.words);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate2(\"Word just highlighted: \", ctx.highlightedWords[ctx.highlightedWords.length - 1], \" / \", ctx.highlightedWords[ctx.highlightedWords.length - 2], \" \");\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [i1.NgForOf, i1.NgIf, i2.RouterLink, i1.DecimalPipe],\n    styles: [\".outer[_ngcontent-%COMP%]{padding:20px;min-height:100vh;background-color:#e6e6fa}td[_ngcontent-%COMP%]{border:1px solid #ccc;padding:5px;font-size:20px;font-family:Arial,sans-serif;background-color:#fff;cursor:pointer}td.selected[_ngcontent-%COMP%]{background-color:#1e1eff50}.top-bar[_ngcontent-%COMP%]{display:flex;align-items:center;justify-content:space-between}.lowestTime[_ngcontent-%COMP%], .timer[_ngcontent-%COMP%]{font-size:1.5rem;text-align:left;justify-content:flex-start}.reset[_ngcontent-%COMP%]{font-size:1.5rem;margin-right:20px;justify-content:center}.return[_ngcontent-%COMP%]{font-size:1.5rem;margin-right:20px;justify-content:flex-end}\"]\n  });\n  return WordSearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}