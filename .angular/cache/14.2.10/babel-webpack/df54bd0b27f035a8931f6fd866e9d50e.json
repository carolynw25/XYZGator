{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { By } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\ndescribe('AppComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [FormsModule]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }); // Test case for checking whether the form fields exist or not.\n\n  it('should have all the form fields', () => {\n    const form = fixture.debugElement.query(By.css('form')).nativeElement;\n    const inputFields = form.querySelectorAll('input');\n    expect(inputFields.length).toBe(5);\n  }); // Test case for checking the functionality of the \"Update Profile\" button.\n\n  it('should call updateUserData() function when Update Profile button is clicked', () => {\n    spyOn(component, 'updateUserData');\n    const button = fixture.debugElement.query(By.css('.btn-primary')).nativeElement;\n    button.click();\n    fixture.detectChanges();\n    expect(component.updateUserData).toHaveBeenCalled();\n  }); // Test case for checking whether the form fields are being updated or not.\n\n  it('should update the corresponding variable when the input field is updated', () => {\n    const usernameInput = fixture.debugElement.query(By.css('input[type=\"text\"]')).nativeElement;\n    usernameInput.value = 'testuser';\n    usernameInput.dispatchEvent(new Event('input'));\n    expect(component.username).toBe('testuser');\n  }); // Test case for checking whether the form is submitted or not.\n\n  it('should submit the form when the Update Profile button is clicked', () => {\n    const form = fixture.debugElement.query(By.css('form')).nativeElement;\n    spyOn(form, 'submit');\n    const button = fixture.debugElement.query(By.css('.btn-primary')).nativeElement;\n    button.click();\n    fixture.detectChanges();\n    expect(form.submit).toHaveBeenCalled();\n  });\n});","map":{"version":3,"mappings":";AAAA,SAA2BA,OAA3B,QAA0C,uBAA1C;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,SAASC,EAAT,QAAmB,2BAAnB;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEAC,QAAQ,CAAC,cAAD,EAAiB,MAAK;EAC5B,IAAIC,SAAJ;EACA,IAAIC,OAAJ;EAEAC,UAAU,iCAAC,aAAW;IACpB,MAAMP,OAAO,CAACQ,sBAAR,CAA+B;MACnCC,YAAY,EAAE,CAAEN,YAAF,CADqB;MAEnCO,OAAO,EAAE,CAAET,WAAF;IAF0B,CAA/B,EAILU,iBAJK,EAAN;EAKD,CANS,EAAV;EAQAJ,UAAU,CAAC,MAAK;IACdD,OAAO,GAAGN,OAAO,CAACY,eAAR,CAAwBT,YAAxB,CAAV;IACAE,SAAS,GAAGC,OAAO,CAACO,iBAApB;IACAP,OAAO,CAACQ,aAAR;EACD,CAJS,CAAV,CAZ4B,CAkB5B;;EACAC,EAAE,CAAC,iCAAD,EAAoC,MAAK;IACzC,MAAMC,IAAI,GAAGV,OAAO,CAACW,YAAR,CAAqBC,KAArB,CAA2BhB,EAAE,CAACiB,GAAH,CAAO,MAAP,CAA3B,EAA2CC,aAAxD;IACA,MAAMC,WAAW,GAAGL,IAAI,CAACM,gBAAL,CAAsB,OAAtB,CAApB;IACAC,MAAM,CAACF,WAAW,CAACG,MAAb,CAAN,CAA2BC,IAA3B,CAAgC,CAAhC;EACD,CAJC,CAAF,CAnB4B,CAyB5B;;EACAV,EAAE,CAAC,6EAAD,EAAgF,MAAK;IACrFW,KAAK,CAACrB,SAAD,EAAY,gBAAZ,CAAL;IACA,MAAMsB,MAAM,GAAGrB,OAAO,CAACW,YAAR,CAAqBC,KAArB,CAA2BhB,EAAE,CAACiB,GAAH,CAAO,cAAP,CAA3B,EAAmDC,aAAlE;IACAO,MAAM,CAACC,KAAP;IACAtB,OAAO,CAACQ,aAAR;IACAS,MAAM,CAAClB,SAAS,CAACwB,cAAX,CAAN,CAAiCC,gBAAjC;EACD,CANC,CAAF,CA1B4B,CAkC5B;;EACAf,EAAE,CAAC,0EAAD,EAA6E,MAAK;IAClF,MAAMgB,aAAa,GAAGzB,OAAO,CAACW,YAAR,CAAqBC,KAArB,CAA2BhB,EAAE,CAACiB,GAAH,CAAO,oBAAP,CAA3B,EAAyDC,aAA/E;IACAW,aAAa,CAACC,KAAd,GAAsB,UAAtB;IACAD,aAAa,CAACE,aAAd,CAA4B,IAAIC,KAAJ,CAAU,OAAV,CAA5B;IACAX,MAAM,CAAClB,SAAS,CAAC8B,QAAX,CAAN,CAA2BV,IAA3B,CAAgC,UAAhC;EACD,CALC,CAAF,CAnC4B,CA0C5B;;EACAV,EAAE,CAAC,kEAAD,EAAqE,MAAK;IAC1E,MAAMC,IAAI,GAAGV,OAAO,CAACW,YAAR,CAAqBC,KAArB,CAA2BhB,EAAE,CAACiB,GAAH,CAAO,MAAP,CAA3B,EAA2CC,aAAxD;IACAM,KAAK,CAACV,IAAD,EAAO,QAAP,CAAL;IACA,MAAMW,MAAM,GAAGrB,OAAO,CAACW,YAAR,CAAqBC,KAArB,CAA2BhB,EAAE,CAACiB,GAAH,CAAO,cAAP,CAA3B,EAAmDC,aAAlE;IACAO,MAAM,CAACC,KAAP;IACAtB,OAAO,CAACQ,aAAR;IACAS,MAAM,CAACP,IAAI,CAACoB,MAAN,CAAN,CAAoBN,gBAApB;EACD,CAPC,CAAF;AASD,CApDO,CAAR","names":["TestBed","FormsModule","By","AppComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","compileComponents","createComponent","componentInstance","detectChanges","it","form","debugElement","query","css","nativeElement","inputFields","querySelectorAll","expect","length","toBe","spyOn","button","click","updateUserData","toHaveBeenCalled","usernameInput","value","dispatchEvent","Event","username","submit"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/pages/user/user.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { FormsModule } from '@angular/forms';\nimport { By } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\ndescribe('AppComponent', () => {\n  let component: AppComponent;\n  let fixture: ComponentFixture<AppComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ AppComponent ],\n      imports: [ FormsModule ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  // Test case for checking whether the form fields exist or not.\n  it('should have all the form fields', () => {\n    const form = fixture.debugElement.query(By.css('form')).nativeElement;\n    const inputFields = form.querySelectorAll('input');\n    expect(inputFields.length).toBe(5);\n  });\n\n  // Test case for checking the functionality of the \"Update Profile\" button.\n  it('should call updateUserData() function when Update Profile button is clicked', () => {\n    spyOn(component, 'updateUserData');\n    const button = fixture.debugElement.query(By.css('.btn-primary')).nativeElement;\n    button.click();\n    fixture.detectChanges();\n    expect(component.updateUserData).toHaveBeenCalled();\n  });\n\n  // Test case for checking whether the form fields are being updated or not.\n  it('should update the corresponding variable when the input field is updated', () => {\n    const usernameInput = fixture.debugElement.query(By.css('input[type=\"text\"]')).nativeElement;\n    usernameInput.value = 'testuser';\n    usernameInput.dispatchEvent(new Event('input'));\n    expect(component.username).toBe('testuser');\n  });\n\n  // Test case for checking whether the form is submitted or not.\n  it('should submit the form when the Update Profile button is clicked', () => {\n    const form = fixture.debugElement.query(By.css('form')).nativeElement;\n    spyOn(form, 'submit');\n    const button = fixture.debugElement.query(By.css('.btn-primary')).nativeElement;\n    button.click();\n    fixture.detectChanges();\n    expect(form.submit).toHaveBeenCalled();\n  });\n\n});\n"]},"metadata":{},"sourceType":"module"}