{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserComponent } from './user.component';\nimport { UserIdService } from 'app/userIdService';\ndescribe('UserComponent', () => {\n  let component;\n  let fixture;\n  let httpTestingController;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, RouterTestingModule, HttpClientTestingModule],\n      declarations: [UserComponent],\n      providers: [UserIdService]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserComponent);\n    component = fixture.componentInstance;\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should update username', () => {\n    component.userID = 1;\n    component.username = 'newUsername';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/name');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({\n      username: 'newUsername'\n    });\n    req.flush({});\n    expect(component.username).toEqual('');\n  });\n  it('should update password', () => {\n    component.userID = 1;\n    component.password = 'newPassword';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/pass');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({\n      password: 'newPassword'\n    });\n    req.flush({});\n    expect(component.password).toEqual('');\n  });\n  it('should update first name', () => {\n    component.userID = 1;\n    component.firstname = 'newFirstName';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/first');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({\n      firstName: 'newFirstName'\n    });\n    req.flush({});\n    expect(component.firstname).toEqual('');\n  });\n  it('should update last name', () => {\n    component.userID = 1;\n    component.lastname = 'newLastName';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/last');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({\n      lastName: 'newLastName'\n    });\n    req.flush({});\n    expect(component.lastname).toEqual('');\n  });\n  it('should update email', () => {\n    component.userID = 1;\n    component.email = 'newEmail';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/email');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({\n      email: 'newEmail'\n    });\n    req.flush({});\n    expect(component.email).toEqual('');\n  });\n});","map":{"version":3,"mappings":"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","names":["HttpClientTestingModule","HttpTestingController","TestBed","ReactiveFormsModule","RouterTestingModule","UserComponent","UserIdService","describe","component","fixture","httpTestingController","beforeEach","configureTestingModule","imports","declarations","providers","compileComponents","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","expect","toBeTruthy","userID","username","updateUserData","req","expectOne","request","method","toEqual","body","flush","password","firstname","firstName","lastname","lastName","email"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/pages/user/user.component.spec.ts"],"sourcesContent":["import { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserComponent } from './user.component';\nimport { UserIdService } from 'app/userIdService';\nimport { Observable, of } from 'rxjs';\nimport { NgControl } from '@angular/forms';\n\n\ndescribe('UserComponent', () => {\n  let component: UserComponent;\n  let fixture: ComponentFixture<UserComponent>;\n  let httpTestingController: HttpTestingController;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [ReactiveFormsModule, RouterTestingModule, HttpClientTestingModule],\n      declarations: [UserComponent],\n      providers: [UserIdService],\n    }).compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserComponent);\n    component = fixture.componentInstance;\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should update username', () => {\n    component.userID = 1;\n    component.username = 'newUsername';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/name');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({ username: 'newUsername' });\n    req.flush({});\n    expect(component.username).toEqual('');\n  });\n\n  it('should update password', () => {\n    component.userID = 1;\n    component.password = 'newPassword';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/pass');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({ password: 'newPassword' });\n    req.flush({});\n    expect(component.password).toEqual('');\n  });\n\n  it('should update first name', () => {\n    component.userID = 1;\n    component.firstname = 'newFirstName';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/first');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({ firstName: 'newFirstName' });\n    req.flush({});\n    expect(component.firstname).toEqual('');\n  });\n\n  it('should update last name', () => {\n    component.userID = 1;\n    component.lastname = 'newLastName';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/last');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({ lastName: 'newLastName' });\n    req.flush({});\n    expect(component.lastname).toEqual('');\n  });\n\n  it('should update email', () => {\n    component.userID = 1;\n    component.email = 'newEmail';\n    component.updateUserData();\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/users/1/email');\n    expect(req.request.method).toEqual('PUT');\n    expect(req.request.body).toEqual({ email: 'newEmail' });\n    req.flush({});\n    expect(component.email).toEqual('');\n  });\n\n});"]},"metadata":{},"sourceType":"module"}