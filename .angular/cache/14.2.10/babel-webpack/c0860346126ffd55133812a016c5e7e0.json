{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { CardComponent } from './card.component';\ndescribe('CardComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [CardComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should generate cards correctly', () => {\n    expect(component.cards.length).toBeGreaterThan(0);\n    expect(component.cards.length).toBe(28);\n\n    for (let i = 0; i < component.cards.length; i++) {\n      const card = component.cards[i];\n      expect(card.id).toBeDefined();\n      expect(card.isFlipped).toBeFalsy();\n      expect(card.isMatched).toBeFalsy();\n      expect(card.color).toBeDefined();\n    }\n  });\n  it('should flip card when clicked', () => {\n    const card = component.cards[0];\n    spyOn(component, 'flipCard');\n    const cardElement = fixture.nativeElement.querySelector('.card');\n    cardElement.click();\n    expect(component.flipCard).toHaveBeenCalledWith(card);\n    expect(!card.isFlipped).toBeTruthy();\n  });\n  it('should identify matching cards', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isMatched).toBeTruthy();\n    expect(!card2.isMatched).toBeTruthy();\n  });\n  it('should flip unmatched cards back over', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[2];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isFlipped).toBeFalsy();\n    expect(!card2.isFlipped).toBeFalsy();\n  });\n  it('should reset game', () => {\n    spyOn(component, 'reset');\n    const resetButton = fixture.nativeElement.querySelector('.reset button');\n    resetButton.click();\n    expect(component.reset).toHaveBeenCalled();\n    expect(component.disableCards).toBeFalsy();\n  });\n  it('should start timer when first card is flipped', () => {\n    const card = component.cards[0];\n    spyOn(window, 'setInterval');\n    component.flipCard(card);\n    expect(window.setInterval).toHaveBeenCalled();\n  });\n  it('should stop timer when all cards are matched', () => {\n    spyOn(window, 'clearInterval');\n    component.cards.forEach(card => card.isMatched = true);\n    expect(window.clearInterval).toHaveBeenCalled();\n  }); // it('should update lowest time when game is won', () => {\n  //   component.minutes = 0;\n  //   component.seconds = 30;\n  //   component.updateLowestTime();\n  //   expect(component.newRecord).toBeTruthy();\n  //   expect(component.lowestTime.minutes).toBe(0);\n  //   expect(component.lowestTime.seconds).toBe(30);\n  // });\n\n  it('should match cards with the same color', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    card1.color = 'red';\n    card2.color = 'red';\n    fixture.detectChanges();\n    const cards = fixture.debugElement.queryAll(By.css('.card'));\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(false);\n    cards[0].triggerEventHandler('click', null);\n    cards[1].triggerEventHandler('click', null);\n    fixture.detectChanges();\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[0].nativeElement.classList.contains('matched')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('matched')).toBe(false);\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","By","CardComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","cards","length","toBeGreaterThan","toBe","i","card","id","toBeDefined","isFlipped","toBeFalsy","isMatched","color","spyOn","cardElement","nativeElement","querySelector","click","flipCard","toHaveBeenCalledWith","card1","card2","resetButton","reset","toHaveBeenCalled","disableCards","window","setInterval","forEach","clearInterval","debugElement","queryAll","css","classList","contains","triggerEventHandler"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/card/card.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { CardComponent } from './card.component';\n\ndescribe('CardComponent', () => {\n  let component: CardComponent;\n  let fixture: ComponentFixture<CardComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ CardComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(CardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should generate cards correctly', () => {\n    expect(component.cards.length).toBeGreaterThan(0);\n    expect(component.cards.length).toBe(28);\n    for (let i = 0; i < component.cards.length; i++) {\n      const card = component.cards[i];\n      expect(card.id).toBeDefined();\n      expect(card.isFlipped).toBeFalsy();\n      expect(card.isMatched).toBeFalsy();\n      expect(card.color).toBeDefined();\n    }\n  });\n\n  it('should flip card when clicked', () => {\n    const card = component.cards[0];\n    spyOn(component, 'flipCard');\n    const cardElement = fixture.nativeElement.querySelector('.card');\n    cardElement.click();\n    expect(component.flipCard).toHaveBeenCalledWith(card);\n    expect(!card.isFlipped).toBeTruthy();\n  });\n\n  it('should identify matching cards', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isMatched).toBeTruthy();\n    expect(!card2.isMatched).toBeTruthy();\n  });\n\n  it('should flip unmatched cards back over', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[2];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isFlipped).toBeFalsy();\n    expect(!card2.isFlipped).toBeFalsy();\n  });\n\n  it('should reset game', () => {\n    spyOn(component, 'reset');\n    const resetButton = fixture.nativeElement.querySelector('.reset button');\n    resetButton.click();\n    expect(component.reset).toHaveBeenCalled();\n    expect(component.disableCards).toBeFalsy();\n  });\n\n  it('should start timer when first card is flipped', () => {\n    const card = component.cards[0];\n    spyOn(window, 'setInterval');\n    component.flipCard(card);\n    expect(window.setInterval).toHaveBeenCalled();\n  });\n\n  it('should stop timer when all cards are matched', () => {\n    spyOn(window, 'clearInterval');\n    component.cards.forEach(card => card.isMatched = true);\n    expect(window.clearInterval).toHaveBeenCalled();\n  });\n\n  // it('should update lowest time when game is won', () => {\n  //   component.minutes = 0;\n  //   component.seconds = 30;\n  //   component.updateLowestTime();\n  //   expect(component.newRecord).toBeTruthy();\n  //   expect(component.lowestTime.minutes).toBe(0);\n  //   expect(component.lowestTime.seconds).toBe(30);\n  // });\n\n  it('should match cards with the same color', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    card1.color = 'red';\n    card2.color = 'red';\n    fixture.detectChanges();\n    const cards = fixture.debugElement.queryAll(By.css('.card'));\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(false);\n    cards[0].triggerEventHandler('click', null);\n    cards[1].triggerEventHandler('click', null);\n    fixture.detectChanges();\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[0].nativeElement.classList.contains('matched')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('matched')).toBe(false);\n  });\n\n})"]},"metadata":{},"sourceType":"module"}