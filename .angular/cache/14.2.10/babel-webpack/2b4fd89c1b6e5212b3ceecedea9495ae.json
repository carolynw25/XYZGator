{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ForgetPasswordComponent } from './forget-password.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\ndescribe('ForgetPasswordComponent', () => {\n  let component;\n  let fixture;\n  let httpTestingController;\n  let httpClient;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule],\n      providers: [FormBuilder, UserIdService],\n      declarations: [ForgetPasswordComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ForgetPasswordComponent);\n    component = fixture.componentInstance;\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should send reset password request to server', () => {\n    // Set test data\n    component.forgetPasswordForm.setValue({\n      email: 'test@example.com',\n      securityQuestion: 'dog',\n      newPass: 'newpassword'\n    }); // Stub response from server\n\n    const response = {\n      success: true,\n      message: 'Password reset link sent to your email'\n    }; // Trigger form submit\n\n    component.onSubmit(); // Expect request to server\n\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/forgotPassword');\n    expect(req.request.method).toEqual('POST');\n    expect(req.request.body).toEqual({\n      email: 'test@example.com',\n      favoriteAnimal: 'dog',\n      password: 'newpassword'\n    }); // Return stub response from server\n\n    req.flush(response); // Expect redirection to login page\n\n    expect(router.navigate).toHaveBeenCalledWith(['/login']);\n  });\n  it('should handle error if reset password request fails', () => {\n    // Set test data\n    component.forgetPasswordForm.setValue({\n      email: 'test@example.com',\n      securityQuestion: 'dog',\n      newPass: 'newpassword'\n    }); // Stub error from server\n\n    const error = {\n      status: 500,\n      statusText: 'Internal Server Error'\n    }; // Trigger form submit\n\n    component.onSubmit(); // Expect request to server\n\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/forgotPassword');\n    expect(req.request.method).toEqual('POST');\n    expect(req.request.body).toEqual({\n      email: 'test@example.com',\n      favoriteAnimal: 'dog',\n      password: 'newpassword'\n    }); // Return stub error from server\n\n    req.flush(null, error); // Expect error to be logged\n\n    expect(console.log).toHaveBeenCalledWith(error); // Expect no redirection\n\n    expect(router.navigate).not.toHaveBeenCalled();\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","HttpClientTestingModule","HttpTestingController","RouterTestingModule","ReactiveFormsModule","ForgetPasswordComponent","UserIdService","HttpClient","FormBuilder","Router","describe","component","fixture","httpTestingController","httpClient","router","beforeEach","configureTestingModule","imports","providers","declarations","compileComponents","createComponent","componentInstance","inject","detectChanges","afterEach","verify","it","expect","toBeTruthy","forgetPasswordForm","setValue","email","securityQuestion","newPass","response","success","message","onSubmit","req","expectOne","request","method","toEqual","body","favoriteAnimal","password","flush","navigate","toHaveBeenCalledWith","error","status","statusText","console","log","not","toHaveBeenCalled"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/forget-password/forget-password.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { ForgetPasswordComponent } from './forget-password.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\n\ndescribe('ForgetPasswordComponent', () => {\n  let component: ForgetPasswordComponent;\n  let fixture: ComponentFixture<ForgetPasswordComponent>;\n  let httpTestingController: HttpTestingController;\n  let httpClient: HttpClient;\n  let router: Router;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, RouterTestingModule, ReactiveFormsModule],\n      providers: [FormBuilder, UserIdService],\n      declarations: [ ForgetPasswordComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ForgetPasswordComponent);\n    component = fixture.componentInstance;\n    httpClient = TestBed.inject(HttpClient);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    router = TestBed.inject(Router);\n    fixture.detectChanges();\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should send reset password request to server', () => {\n    // Set test data\n    component.forgetPasswordForm.setValue({\n      email: 'test@example.com',\n      securityQuestion: 'dog',\n      newPass: 'newpassword'\n    });\n\n    // Stub response from server\n    const response = {\n      success: true,\n      message: 'Password reset link sent to your email'\n    };\n\n    // Trigger form submit\n    component.onSubmit();\n\n    // Expect request to server\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/forgotPassword');\n    expect(req.request.method).toEqual('POST');\n    expect(req.request.body).toEqual({\n      email: 'test@example.com',\n      favoriteAnimal: 'dog',\n      password: 'newpassword'\n    });\n\n    // Return stub response from server\n    req.flush(response);\n\n    // Expect redirection to login page\n    expect(router.navigate).toHaveBeenCalledWith(['/login']);\n  });\n\n  it('should handle error if reset password request fails', () => {\n    // Set test data\n    component.forgetPasswordForm.setValue({\n      email: 'test@example.com',\n      securityQuestion: 'dog',\n      newPass: 'newpassword'\n    });\n\n    // Stub error from server\n    const error = {\n      status: 500,\n      statusText: 'Internal Server Error'\n    };\n\n    // Trigger form submit\n    component.onSubmit();\n\n    // Expect request to server\n    const req = httpTestingController.expectOne('http://127.0.0.1:8080/api/forgotPassword');\n    expect(req.request.method).toEqual('POST');\n    expect(req.request.body).toEqual({\n      email: 'test@example.com',\n      favoriteAnimal: 'dog',\n      password: 'newpassword'\n    });\n\n    // Return stub error from server\n    req.flush(null, error);\n\n    // Expect error to be logged\n    expect(console.log).toHaveBeenCalledWith(error);\n\n    // Expect no redirection\n    expect(router.navigate).not.toHaveBeenCalled();\n  });\n});\n"]},"metadata":{},"sourceType":"module"}