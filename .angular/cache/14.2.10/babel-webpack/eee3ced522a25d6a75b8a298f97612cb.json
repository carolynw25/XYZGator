{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction WordSearchComponent_tr_2_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const letter_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(letter_r3);\n  }\n}\n\nfunction WordSearchComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, WordSearchComponent_tr_2_td_1_Template, 2, 1, \"td\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport let WordSearchComponent = /*#__PURE__*/(() => {\n  class WordSearchComponent {\n    constructor() {\n      this.words = ['HHHHHHHH'];\n      this.grid = [];\n      this.columnNum = 20;\n      this.rowNum = 10;\n    }\n\n    ngOnInit() {\n      this.generateGrid();\n    } // canPlaceWord(word: string, startX: number, startY: number, directionX: number, directionY: number): number[][] | null {\n    //   // Check if the word can be placed in the grid\n    //   const positions: number[][] = [];\n    //   let x = startX;\n    //   let y = startY;\n    //   for (const letter of word) {\n    //     if (x < 0 || x >= 10 || y < 0 || y >= 10 || (this.grid[y][x] !== '' && this.grid[y][x] !== letter)) {\n    //       return null;\n    //     }\n    //     positions.push([y, x]);\n    //     x += directionX;\n    //     y += directionY;\n    //   }\n    //   return positions;\n    // }\n\n\n    generateGrid() {\n      // Create a hash table of the words for faster lookups\n      const wordSet = new Set(this.words); // Sort the words by length so that we try placing the longest words first\n\n      const sortedWords = this.words.sort((a, b) => b.length - a.length); // Initialize the grid\n\n      for (let i = 0; i < this.rowNum; i++) {\n        this.grid.push([]);\n\n        for (let j = 0; j < this.columnNum; j++) {\n          this.grid[i].push('');\n        }\n      } // Try placing each word in the grid\n\n\n      let success = true;\n\n      for (let word of sortedWords) {\n        success = false;\n\n        for (let i = 0; i < this.rowNum; i++) {\n          for (let j = 0; j < this.columnNum; j++) {\n            if (this.canPlaceWord(word, i, j)) {\n              this.placeWord(word, i, j);\n              success = true;\n              break;\n            }\n          }\n\n          if (success) break;\n        }\n\n        if (!success) {\n          // Backtrack to the previous word\n          const previousWord = sortedWords[sortedWords.indexOf(word) - 1];\n          const {\n            x,\n            y\n          } = this.findWord(previousWord);\n          this.removeWord(previousWord, x, y);\n          this.grid = this.grid.map(row => row.map(cell => cell === previousWord[0] ? '' : cell));\n          sortedWords.splice(sortedWords.indexOf(word), 1);\n        }\n      }\n    }\n\n    canPlaceWord(word, startX, startY) {\n      // Check if the word can be placed in the grid\n      if (startX + word.length > this.columnNum || startY + word.length > this.rowNum) {\n        return false;\n      }\n\n      for (let i = 0; i < word.length; i++) {\n        const x = startX + i;\n        const y = startY + i;\n\n        if (this.grid[y][x] !== '' && this.grid[y][x] !== word[i]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    placeWord(word, startX, startY) {\n      // Place the word in the grid\n      for (let i = 0; i < word.length; i++) {\n        const x = startX + i;\n        const y = startY + i;\n        this.grid[y][x] = word[i];\n      }\n    }\n\n  }\n\n  WordSearchComponent.ɵfac = function WordSearchComponent_Factory(t) {\n    return new (t || WordSearchComponent)();\n  };\n\n  WordSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordSearchComponent,\n    selectors: [[\"app-word-search\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"outer\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function WordSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\");\n        i0.ɵɵtemplate(2, WordSearchComponent_tr_2_Template, 2, 1, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\".outer[_ngcontent-%COMP%]{padding:20px;min-height:100vh;background-color:#e6e6fa}td[_ngcontent-%COMP%]{border:1px solid #ccc;padding:5px;font-size:20px;font-family:Arial,sans-serif;background-color:#fff}\"]\n  });\n  return WordSearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}