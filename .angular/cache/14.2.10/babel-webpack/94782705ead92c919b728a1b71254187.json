{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nlet MathComponent = class MathComponent {\n  constructor() {\n    this.minutes = 0;\n    this.seconds = 0;\n    this.lowestTime = null;\n    this.newRecord = false;\n    this.rows = []; //the numbers\n\n    this.generateNumbers(); //start timer\n\n    this.stopTimer();\n    this.startTimer(); //numbers\n\n    this.number1 = Math.floor(Math.random() * 15) + 1;\n    this.number2 = Math.floor(Math.random() * 15) + 1;\n  }\n\n  generateNumbers() {\n    let currentRow = [];\n    let currentNum = 1;\n\n    for (let i = 1; i <= 3; i++) {\n      for (let j = 1; j <= 10; j++) {\n        currentRow.push(currentNum);\n        currentNum++;\n      }\n\n      this.rows.push(currentRow);\n      currentRow = [];\n    }\n  }\n\n  checkSum(clickedNumber) {\n    if (clickedNumber === this.number1 + this.number2) {\n      Swal.fire({\n        title: 'Congratulations!',\n        text: `You clicked ${clickedNumber}, which is the sum of ${this.number1} and ${this.number2}.`,\n        icon: 'success'\n      });\n    }\n  }\n\n  ngOnInit() {\n    throw new Error('Method not implemented.');\n  }\n\n  reset() {\n    this.newRecord = false;\n    this.stopTimer();\n    this.startTimer();\n  }\n\n  startTimer() {\n    this.timer = setInterval(() => {\n      if (this.seconds < 59) {\n        this.seconds++;\n      } else {\n        this.minutes++;\n        this.seconds = 0;\n      }\n    }, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n};\nMathComponent = __decorate([Component({\n  selector: 'app-math',\n  template: `\n<div class =\"outer\">\n  <div class=\"top-bar\">\n    <div class=\"lowestTime\">\n      <div *ngIf=\"lowestTime !== null\" class=\"lowest-time\"> lowestTime: {{ lowestTime.minutes }}:{{ lowestTime.seconds | number: '2.0' }}</div>\n      <div *ngIf=\"lowestTime == null\" class=\"lowest-time\"> lowestTime: </div>\n    </div>\n    <div class=\"reset\">\n      <button (click)=\"reset()\">Reset</button>\n    </div>\n    <div class=\"timer\"> timer: {{ minutes }}:{{ seconds | number: '2.0' }}</div>\n    <div class=\"return\">\n      <button routerLink=\"/notifications\">Return</button>\n    </div>\n  </div>\n  <div class=\"question\"> Solve: {{ number1 }} + {{ number2 }} </div>\n  <div *ngFor=\"let row of rows\" class=\"row\">\n    <div *ngFor=\"let num of row\" class=\"number\"\n    [ngClass]=\"{'clickable': num === (number1 + number2), }\" \n    (click)=\"checkSum(num)\">{{ num }} </div>\n  </div>\n  \n\n</div>\n`,\n  styles: [`\n.outer {\n  padding: 20px;\n  min-height: 100vh;\n  background-color: lavender;\n}\n.top-bar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 40px;\n}\n.lowestTime{\n  font-size: 2rem;\n  text-align: left;\n  justify-content: flex-start;\n}\n.timer {\n  font-size: 2rem;\n  text-align: left;\n  justify-content: flex-start;\n}\n.reset{\n  font-size: 2rem;\n  margin-right: 20px;\n  justify-content: center;\n}\n.return{\n  font-size: 2rem;\n  margin-right: 20px;\n  justify-content: flex-end;\n}\n.question{\n  font-size: 4rem;\n  text-align: center;\n}\n.row {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n}\n.number {\n  width: 70px;\n  height: 70px;\n  border: 1px solid black;\n  text-align: center;\n  margin-right: 15px;\n  margin-bottom: 15px;\n  cursor: pointer;\n}\n\n`]\n}), __metadata(\"design:paramtypes\", [])], MathComponent);\nexport { MathComponent };","map":null,"metadata":{},"sourceType":"module"}