{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction WordSearchComponent_tr_2_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const letter_r3 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(letter_r3);\n  }\n}\n\nfunction WordSearchComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, WordSearchComponent_tr_2_td_1_Template, 2, 1, \"td\", 1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport let WordSearchComponent = /*#__PURE__*/(() => {\n  class WordSearchComponent {\n    constructor() {\n      this.words = ['HHHHHHHH'];\n      this.grid = [];\n      this.columnNum = 20;\n      this.rowNum = 10;\n    }\n\n    ngOnInit() {\n      this.generateGrid();\n    }\n\n    canPlaceWord(word, startX, startY, directionX, directionY) {\n      // Check if the word can be placed in the grid\n      const positions = [];\n      let x = startX;\n      let y = startY;\n\n      for (const letter of word) {\n        if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n          return null;\n        }\n\n        positions.push([y, x]);\n        x += directionX;\n        y += directionY;\n      }\n\n      return positions;\n    }\n\n    generateGrid() {\n      // Generate an empty grid of letters\n      for (let i = 0; i < this.rowNum; i++) {\n        this.grid.push([]);\n\n        for (let j = 0; j < this.columnNum; j++) {\n          this.grid[i].push('');\n        }\n      } // Generate a list of all valid positions for each word\n\n\n      const validPositions = {};\n\n      for (let word of this.words) {\n        validPositions[word] = [];\n\n        for (let directionX = -1; directionX <= 1; directionX++) {\n          for (let directionY = -1; directionY <= 1; directionY++) {\n            if (directionX === 0 && directionY === 0) {\n              continue;\n            }\n\n            for (let x = 0; x < this.columnNum; x++) {\n              for (let y = 0; y < this.rowNum; y++) {\n                const positions = this.canPlaceWord(word, x, y, directionX, directionY);\n\n                if (positions) {\n                  validPositions[word].push({\n                    startX: x,\n                    startY: y,\n                    directionX,\n                    directionY,\n                    positions\n                  });\n                }\n              }\n            }\n          }\n        }\n      } // Place each word in the grid (if possible)\n\n\n      let allWordsPlaced = false;\n\n      while (!allWordsPlaced) {\n        allWordsPlaced = true;\n\n        for (let word of this.words) {\n          const positions = validPositions[word];\n\n          if (!positions.length) {\n            allWordsPlaced = false;\n            break;\n          }\n\n          const randomIndex = Math.floor(Math.random() * positions.length);\n          const {\n            startX,\n            startY,\n            directionX,\n            directionY,\n            positions: wordPositions\n          } = positions[randomIndex];\n\n          for (const [y, x] of wordPositions) {\n            this.grid[y][x] = word.charAt(wordPositions.indexOf([y, x]));\n          }\n\n          validPositions[word] = [];\n        }\n      }\n    }\n\n  }\n\n  WordSearchComponent.ɵfac = function WordSearchComponent_Factory(t) {\n    return new (t || WordSearchComponent)();\n  };\n\n  WordSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordSearchComponent,\n    selectors: [[\"app-word-search\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"outer\"], [4, \"ngFor\", \"ngForOf\"]],\n    template: function WordSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\");\n        i0.ɵɵtemplate(2, WordSearchComponent_tr_2_Template, 2, 1, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\".outer[_ngcontent-%COMP%]{padding:20px;min-height:100vh;background-color:#e6e6fa}td[_ngcontent-%COMP%]{border:1px solid #ccc;padding:5px;font-size:20px;font-family:Arial,sans-serif;background-color:#fff}\"]\n  });\n  return WordSearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}