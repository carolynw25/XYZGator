{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserIdService } from 'app/userIdService';\nimport { of } from 'rxjs';\nimport { UserComponent } from './user.component';\ndescribe('UserComponent', () => {\n  let component;\n  let fixture;\n  let userIdServiceStub;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    userIdServiceStub = {\n      getUserId: () => 1\n    };\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, ReactiveFormsModule, RouterTestingModule],\n      declarations: [UserComponent],\n      providers: [{\n        provide: UserIdService,\n        useValue: userIdServiceStub\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserComponent);\n    component = fixture.componentInstance;\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should update username', () => {\n    component.username = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/name', {\n      username: 'test'\n    });\n  });\n  it('should update password', () => {\n    component.password = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/pass', {\n      password: 'test'\n    });\n  });\n  it('should update firstname', () => {\n    component.firstname = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/first', {\n      firstName: 'test'\n    });\n  });\n  it('should update lastname', () => {\n    component.lastname = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/last', {\n      lastame: 'test'\n    });\n  });\n  it('should update email', () => {\n    component.email = 'test@test.com';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/email', {\n      email: 'test@test.com'\n    });\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","HttpClientTestingModule","ReactiveFormsModule","RouterTestingModule","UserIdService","of","UserComponent","describe","component","fixture","userIdServiceStub","beforeEach","getUserId","configureTestingModule","imports","declarations","providers","provide","useValue","compileComponents","createComponent","componentInstance","it","expect","toBeTruthy","username","userID","httpClientSpy","spyOn","inject","HttpClient","and","returnValue","updateUserData","toHaveBeenCalledWith","password","firstname","firstName","lastname","lastame","email"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/pages/user/user.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { UserIdService } from 'app/userIdService';\nimport { of } from 'rxjs';\n\nimport { UserComponent } from './user.component';\n\ndescribe('UserComponent', () => {\n  let component: UserComponent;\n  let fixture: ComponentFixture<UserComponent>;\n  let userIdServiceStub: Partial<UserIdService>;\n\n  beforeEach(async () => {\n    userIdServiceStub = {\n      getUserId: () => 1,\n    };\n\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule, ReactiveFormsModule, RouterTestingModule],\n      declarations: [UserComponent],\n      providers: [{ provide: UserIdService, useValue: userIdServiceStub }],\n    }).compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(UserComponent);\n    component = fixture.componentInstance;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should update username', () => {\n    component.username = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/name', { username: 'test' });\n  });\n\n  it('should update password', () => {\n    component.password = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/pass', { password: 'test' });\n  });\n\n  it('should update firstname', () => {\n    component.firstname = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/first', { firstName: 'test' });\n  });\n\n  it('should update lastname', () => {\n    component.lastname = 'test';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/last', { lastame: 'test' });\n  });\n\n  it('should update email', () => {\n    component.email = 'test@test.com';\n    component.userID = 1;\n    const httpClientSpy = spyOn(TestBed.inject(HttpClient), 'put').and.returnValue(of({}));\n    component.updateUserData();\n    expect(httpClientSpy).toHaveBeenCalledWith('http://127.0.0.1:8080/api/users/1/email', { email: 'test@test.com' });\n  });\n});\n\n"]},"metadata":{},"sourceType":"module"}