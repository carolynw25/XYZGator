{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\n\nfunction WordSearchComponent_tr_2_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"td\", 3);\n    i0.ɵɵlistener(\"click\", function WordSearchComponent_tr_2_td_1_Template_td_click_0_listener() {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r4.selectLetter(ctx_r4.i, ctx_r4.j));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const letter_r3 = ctx.$implicit;\n    const ctx_r2 = i0.ɵɵnextContext(2);\n    i0.ɵɵclassProp(\"selected\", ctx_r2.isSelected(ctx_r2.rowIndex, ctx_r2.j));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(letter_r3);\n  }\n}\n\nfunction WordSearchComponent_tr_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\");\n    i0.ɵɵtemplate(1, WordSearchComponent_tr_2_td_1_Template, 2, 3, \"td\", 2);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", row_r1);\n  }\n}\n\nexport let WordSearchComponent = /*#__PURE__*/(() => {\n  class WordSearchComponent {\n    constructor() {\n      this.words = ['HHHHH', 'ZZZZZZZ', 'PPPPPPP'];\n      this.grid = [];\n      this.columnNum = 20;\n      this.rowNum = 10; // Variables to store the starting and ending positions of the highlight\n\n      this.startRow = null;\n      this.startCol = null;\n      this.endRow = null;\n      this.endCol = null;\n      this.selectedStartIndex = null;\n      this.selectedEndIndex = null;\n    }\n\n    ngOnInit() {\n      this.generateGrid();\n    }\n\n    canPlaceWord(word, startX, startY, directionX, directionY) {\n      // Check if the word can be placed in the grid\n      const positions = [];\n      let x = startX;\n      let y = startY;\n\n      for (const letter of word) {\n        if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n          return null;\n        }\n\n        positions.push([y, x]);\n        x += directionX;\n        y += directionY;\n      }\n\n      return positions;\n    }\n\n    generateGrid() {\n      // Generate an empty grid of letters\n      for (let i = 0; i < this.rowNum; i++) {\n        this.grid.push([]);\n\n        for (let j = 0; j < this.columnNum; j++) {\n          this.grid[i].push('');\n        }\n      } // Place each word in the grid (if possible)\n\n\n      let allWordsPlaced = false;\n\n      while (!allWordsPlaced) {\n        allWordsPlaced = true;\n\n        for (let word of this.words) {\n          let wordPlaced = false; // Try to place the word in the grid in all possible directions\n\n          for (let directionX = -1; directionX <= 1 && !wordPlaced; directionX++) {\n            for (let directionY = -1; directionY <= 1 && !wordPlaced; directionY++) {\n              if (directionX === 0 && directionY === 0) {\n                continue;\n              } // Generate a random starting position for the word in the current direction\n\n\n              const startX = Math.floor(Math.random() * this.rowNum);\n              const startY = Math.floor(Math.random() * this.columnNum);\n              const positions = this.canPlaceWord(word, startX, startY, directionX, directionY); // If the word can be placed, place it in the grid\n\n              if (positions) {\n                let canPlace = true;\n\n                for (const [y, x] of positions) {\n                  if (this.grid[y][x] !== '') {\n                    canPlace = false;\n                    break;\n                  }\n                }\n\n                if (canPlace) {\n                  for (const [y, x] of positions) {\n                    this.grid[y][x] = word.charAt(0).toUpperCase();\n                    word = word.slice(1);\n                  }\n\n                  wordPlaced = true;\n                }\n              }\n            }\n          } // If the word couldn't be placed, reset the grid and start over\n\n\n          if (!wordPlaced) {\n            allWordsPlaced = false;\n            this.grid = [];\n\n            for (let i = 0; i < this.rowNum; i++) {\n              this.grid.push([]);\n\n              for (let j = 0; j < this.columnNum; j++) {\n                this.grid[i].push('');\n              }\n            }\n\n            break;\n          }\n        }\n      } // Fill the remaining empty spaces with random letters\n\n\n      const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n      for (let i = 0; i < this.rowNum; i++) {\n        for (let j = 0; j < this.columnNum; j++) {\n          if (this.grid[i][j] === '') {\n            const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\n            this.grid[i][j] = randomLetter;\n          }\n        }\n      }\n    }\n\n    selectLetter(rowIndex, colIndex) {\n      if (this.selectedStartIndex === null) {\n        // Set the start index if it hasn't been set yet\n        this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n        this.startRow = rowIndex;\n        this.startCol = colIndex;\n      } else if (this.selectedEndIndex === null) {\n        // Set the end index if it hasn't been set yet\n        this.selectedEndIndex = colIndex + rowIndex * this.columnNum;\n        this.endRow = rowIndex;\n        this.endCol = colIndex; // Highlight the selected letters\n\n        const start = Math.min(this.selectedStartIndex, this.selectedEndIndex);\n        const end = Math.max(this.selectedStartIndex, this.selectedEndIndex);\n        const selectedCells = document.querySelectorAll('td');\n        selectedCells.forEach((cell, index) => {\n          if (index >= start && index <= end) {\n            cell.classList.add('selected');\n          } else {\n            cell.classList.remove('selected');\n          }\n        }); // Clear the selection\n\n        this.selectedStartIndex = null;\n        this.selectedEndIndex = null;\n        this.startRow = null;\n        this.startCol = null;\n        this.endRow = null;\n        this.endCol = null;\n      }\n    }\n\n    isSelected(row, col) {\n      if (this.startRow === null || this.startCol === null || this.endRow === null || this.endCol === null) {\n        // No selection has been made yet\n        return false;\n      }\n\n      if (row < Math.min(this.startRow, this.endRow) || row > Math.max(this.startRow, this.endRow)) {\n        // The current row is outside the selected range\n        return false;\n      }\n\n      if (col < Math.min(this.startCol, this.endCol) || col > Math.max(this.startCol, this.endCol)) {\n        // The current column is outside the selected range\n        return false;\n      }\n\n      return true;\n    }\n\n  }\n\n  WordSearchComponent.ɵfac = function WordSearchComponent_Factory(t) {\n    return new (t || WordSearchComponent)();\n  };\n\n  WordSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: WordSearchComponent,\n    selectors: [[\"app-word-search\"]],\n    decls: 3,\n    vars: 1,\n    consts: [[1, \"outer\"], [4, \"ngFor\", \"ngForOf\"], [3, \"selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"]],\n    template: function WordSearchComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"table\");\n        i0.ɵɵtemplate(2, WordSearchComponent_tr_2_Template, 2, 1, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngForOf\", ctx.grid);\n      }\n    },\n    dependencies: [i1.NgForOf],\n    styles: [\".outer[_ngcontent-%COMP%]{padding:20px;min-height:100vh;background-color:#e6e6fa}td[_ngcontent-%COMP%]{border:1px solid #ccc;padding:5px;font-size:20px;font-family:Arial,sans-serif;background-color:#fff}td.selected[_ngcontent-%COMP%]{background-color:#ff0}\"]\n  });\n  return WordSearchComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}