{"ast":null,"code":"import { __decorate, __metadata, __param } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WordSearchComponent = class WordSearchComponent {\n  constructor(maxTries) {\n    this.maxTries = maxTries;\n    const wordList = ['angular', 'javascript', 'typescript', 'html', 'css'];\n    const gridSize = 10;\n    const wordSearch = new WordSearch(wordList, gridSize, this.maxTries);\n    this.puzzle = wordSearch.getPuzzle();\n  }\n\n  generate(words, numRows, numCols) {\n    // Create empty puzzle\n    this.puzzle = new Array(numRows).fill('').map(() => new Array(numCols).fill('')); // Insert words\n\n    for (const word of words) {\n      let inserted = false;\n      let numTries = 0;\n\n      while (!inserted && numTries < this.maxTries) {\n        // Pick random starting position and direction\n        const row = Math.floor(Math.random() * numRows);\n        const col = Math.floor(Math.random() * numCols);\n        const rowInc = [-1, 0, 1][Math.floor(Math.random() * 3)];\n        const colInc = [-1, 0, 1][Math.floor(Math.random() * 3)]; // Skip if both rowInc and colInc are 0\n\n        if (rowInc === 0 && colInc === 0) {\n          continue;\n        } // Try to insert word\n\n\n        inserted = this.tryInsertWord(word, row, col, rowInc, colInc);\n        numTries++;\n      }\n    } // Fill in remaining spaces with random letters\n\n\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    for (let r = 0; r < numRows; r++) {\n      for (let c = 0; c < numCols; c++) {\n        if (this.puzzle[r][c] === '') {\n          this.puzzle[r][c] = alphabet.charAt(Math.floor(Math.random() * alphabet.length));\n        }\n      }\n    }\n\n    return this.puzzle;\n  }\n\n  tryInsertWord(word, row, col, rowInc, colInc) {\n    for (let i = 0; i < word.length; i++) {\n      const r = row + i * rowInc;\n      const c = col + i * colInc;\n\n      if (r < 0 || r >= this.puzzle.length || c < 0 || c >= this.puzzle[0].length) {\n        return false; // Word goes off board\n      }\n\n      if (this.puzzle[r][c] !== '' && this.puzzle[r][c] !== word.charAt(i)) {\n        return false; // Conflict with existing letter\n      }\n    } // Insert word\n\n\n    for (let i = 0; i < word.length; i++) {\n      const r = row + i * rowInc;\n      const c = col + i * colInc;\n      this.puzzle[r][c] = word.charAt(i);\n    }\n\n    return true;\n  }\n\n};\nWordSearchComponent = __decorate([Component({\n  selector: 'app-word-search',\n  template: `\n<div class =\"outer\">\n <table (mouseup)=\"onMouseUp()\">\n   <tbody>\n     <tr *ngFor=\"let row of grid\">\n       <td\n         *ngFor=\"let letter of row; let colIdx = index\"\n         (mousedown)=\"selectWord(letter, i, colIdx)\"\n         [ngClass]=\"{ 'selected': isLetterSelected(i, colIdx), 'found': words.includes(getSelectedWord()) }\"\n       >\n         {{ letter }}\n       </td>\n     </tr>\n   </tbody>\n </table>\n\n\n <p>Find the following words:</p>\n <ul>\n   <li\n     *ngFor=\"let word of words\"\n     [ngClass]=\"{ 'selected': isLetterSelected(word), 'found': grid.flat().join('').includes(word) }\"\n     (click)=\"selectWord(word)\"\n   >\n     {{ word }}\n   </li>\n </ul>\n</div>\n`,\n  styles: [`\n .outer {\n   padding: 20px;\n   min-height: 100vh;\n   background-color: lavender;\n }\n table {\n   border-collapse: collapse;\n }\n\n\n td {\n   width: 30px;\n   height: 30px;\n   border: 1px solid black;\n   text-align: center;\n   font-size: 20px;\n   font-weight: bold;\n }\n\n\n li {\n   display: inline-block;\n   margin-right: 10px;\n   font-weight: bold;\n }\n `]\n}), __param(0, Inject('maxTries')), __metadata(\"design:paramtypes\", [Number])], WordSearchComponent);\nexport { WordSearchComponent };","map":null,"metadata":{},"sourceType":"module"}