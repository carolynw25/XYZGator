{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { ForgetPasswordComponent } from './forget-password.component';\nimport { UserIdService } from 'app/userIdService';\ndescribe('ForgetPasswordComponent', () => {\n  let component;\n  let fixture;\n  let httpMock;\n  let mockUserIdService;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    mockUserIdService = jasmine.createSpyObj('UserIdService', ['saveUserId']);\n    yield TestBed.configureTestingModule({\n      declarations: [ForgetPasswordComponent],\n      imports: [HttpClientTestingModule, RouterTestingModule, FormsModule, ReactiveFormsModule],\n      providers: [{\n        provide: UserIdService,\n        useValue: mockUserIdService\n      }]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ForgetPasswordComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpMock.verify();\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should be invalid when no input is provided', () => {\n    component.email = '';\n    component.securityQuestion = '';\n    component.newPass = '';\n    expect(component.forgetPasswordForm.valid).toBeFalsy();\n  }); //   it('should be invalid when only email is provided', () => {\n  //     component.email = 'test@test.com';\n  //     component.securityQuestion = '';\n  //     component.newPass = '';\n  //     expect(component.forgetPasswordForm.valid).toBeFalsy();\n  //   });\n  //   it('should be invalid when only security question is provided', () => {\n  //     component.email = '';\n  //     component.securityQuestion = 'What is your favorite color?';\n  //     component.newPass = '';\n  //     expect(component.forgetPasswordForm.valid).toBeFalsy();\n  //   });\n  //   it('should be invalid when only new password is provided', () => {\n  //     component.email = '';\n  //     component.securityQuestion = '';\n  //     component.newPass = 'test123';\n  //     expect(component.forgetPasswordForm.valid).toBeFalsy();\n  //   });\n  //   it('should be valid when all inputs are provided', () => {\n  //     component.email = 'test@test.com';\n  //     component.securityQuestion = 'What is your favorite color?';\n  //     component.newPass = 'test123';\n  //     expect(component.forgetPasswordForm.valid).toBeTruthy();\n  //   });\n  //   it('should call onSubmit() function when form is submitted', () => {\n  //     spyOn(component, 'onSubmit');\n  //     component.forgetPasswordForm.setValue({\n  //       email: 'test@test.com',\n  //       securityQuestion: 'What is your favorite color?',\n  //       newPass: 'test123'\n  //     });\n  //     let button = fixture.debugElement.nativeElement.querySelector('button');\n  //     button.click();\n  //     expect(component.onSubmit).toHaveBeenCalled();\n  //   });\n});","map":{"version":3,"mappings":";AAAA,SAA2BA,OAA3B,QAA0C,uBAA1C;AACA,SAASC,uBAAT,EAAkCC,qBAAlC,QAA+D,8BAA/D;AACA,SAASC,mBAAT,QAAoC,yBAApC;AACA,SAASC,mBAAT,EAA8BC,WAA9B,QAAiD,gBAAjD;AAGA,SAASC,uBAAT,QAAwC,6BAAxC;AACA,SAASC,aAAT,QAA8B,mBAA9B;AAEAC,QAAQ,CAAC,yBAAD,EAA4B,MAAK;EACvC,IAAIC,SAAJ;EACA,IAAIC,OAAJ;EACA,IAAIC,QAAJ;EACA,IAAIC,iBAAJ;EAEAC,UAAU,iCAAC,aAAW;IACpBD,iBAAiB,GAAGE,OAAO,CAACC,YAAR,CAAqB,eAArB,EAAsC,CAAC,YAAD,CAAtC,CAApB;IAEA,MAAMf,OAAO,CAACgB,sBAAR,CAA+B;MACnCC,YAAY,EAAE,CAAEX,uBAAF,CADqB;MAEnCY,OAAO,EAAE,CACPjB,uBADO,EAEPE,mBAFO,EAGPE,WAHO,EAIPD,mBAJO,CAF0B;MAQnCe,SAAS,EAAE,CACT;QAAEC,OAAO,EAAEb,aAAX;QAA0Bc,QAAQ,EAAET;MAApC,CADS;IARwB,CAA/B,EAYLU,iBAZK,EAAN;EAaD,CAhBS,EAAV;EAkBAT,UAAU,CAAC,MAAK;IACdH,OAAO,GAAGV,OAAO,CAACuB,eAAR,CAAwBjB,uBAAxB,CAAV;IACAG,SAAS,GAAGC,OAAO,CAACc,iBAApB;IACAd,OAAO,CAACe,aAAR;IACAd,QAAQ,GAAGX,OAAO,CAAC0B,MAAR,CAAexB,qBAAf,CAAX;EACD,CALS,CAAV;EAOAyB,SAAS,CAAC,MAAK;IACbhB,QAAQ,CAACiB,MAAT;EACD,CAFQ,CAAT;EAIAC,EAAE,CAAC,6BAAD,EAAgC,MAAK;IACrCC,MAAM,CAACrB,SAAD,CAAN,CAAkBsB,UAAlB;EACD,CAFC,CAAF;EAIAF,EAAE,CAAC,6CAAD,EAAgD,MAAK;IACrDpB,SAAS,CAACuB,KAAV,GAAkB,EAAlB;IACAvB,SAAS,CAACwB,gBAAV,GAA6B,EAA7B;IACAxB,SAAS,CAACyB,OAAV,GAAoB,EAApB;IACAJ,MAAM,CAACrB,SAAS,CAAC0B,kBAAV,CAA6BC,KAA9B,CAAN,CAA2CC,SAA3C;EACD,CALC,CAAF,CAvCuC,CA8CzC;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AAGC,CAzFO,CAAR","names":["TestBed","HttpClientTestingModule","HttpTestingController","RouterTestingModule","ReactiveFormsModule","FormsModule","ForgetPasswordComponent","UserIdService","describe","component","fixture","httpMock","mockUserIdService","beforeEach","jasmine","createSpyObj","configureTestingModule","declarations","imports","providers","provide","useValue","compileComponents","createComponent","componentInstance","detectChanges","inject","afterEach","verify","it","expect","toBeTruthy","email","securityQuestion","newPass","forgetPasswordForm","valid","toBeFalsy"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/forget-password/forget-password.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\nimport { Observable } from 'rxjs';\n\nimport { ForgetPasswordComponent } from './forget-password.component';\nimport { UserIdService } from 'app/userIdService';\n\ndescribe('ForgetPasswordComponent', () => {\n  let component: ForgetPasswordComponent;\n  let fixture: ComponentFixture<ForgetPasswordComponent>;\n  let httpMock: HttpTestingController;\n  let mockUserIdService: jasmine.SpyObj<UserIdService>;\n\n  beforeEach(async () => {\n    mockUserIdService = jasmine.createSpyObj('UserIdService', ['saveUserId']);\n\n    await TestBed.configureTestingModule({\n      declarations: [ ForgetPasswordComponent ],\n      imports: [ \n        HttpClientTestingModule,\n        RouterTestingModule,\n        FormsModule,\n        ReactiveFormsModule\n      ],\n      providers: [\n        { provide: UserIdService, useValue: mockUserIdService }\n      ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(ForgetPasswordComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpMock.verify();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should be invalid when no input is provided', () => {\n    component.email = '';\n    component.securityQuestion = '';\n    component.newPass = '';\n    expect(component.forgetPasswordForm.valid).toBeFalsy();\n  });\n\n//   it('should be invalid when only email is provided', () => {\n//     component.email = 'test@test.com';\n//     component.securityQuestion = '';\n//     component.newPass = '';\n//     expect(component.forgetPasswordForm.valid).toBeFalsy();\n//   });\n\n//   it('should be invalid when only security question is provided', () => {\n//     component.email = '';\n//     component.securityQuestion = 'What is your favorite color?';\n//     component.newPass = '';\n//     expect(component.forgetPasswordForm.valid).toBeFalsy();\n//   });\n\n\n//   it('should be invalid when only new password is provided', () => {\n//     component.email = '';\n//     component.securityQuestion = '';\n//     component.newPass = 'test123';\n//     expect(component.forgetPasswordForm.valid).toBeFalsy();\n//   });\n\n//   it('should be valid when all inputs are provided', () => {\n//     component.email = 'test@test.com';\n//     component.securityQuestion = 'What is your favorite color?';\n//     component.newPass = 'test123';\n//     expect(component.forgetPasswordForm.valid).toBeTruthy();\n//   });\n\n\n//   it('should call onSubmit() function when form is submitted', () => {\n//     spyOn(component, 'onSubmit');\n//     component.forgetPasswordForm.setValue({\n//       email: 'test@test.com',\n//       securityQuestion: 'What is your favorite color?',\n//       newPass: 'test123'\n//     });\n//     let button = fixture.debugElement.nativeElement.querySelector('button');\n//     button.click();\n//     expect(component.onSubmit).toHaveBeenCalled();\n//   });\n\n\n});"]},"metadata":{},"sourceType":"module"}