{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WordSearchComponent } from './word-search.component';\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\ndescribe('WordSearchComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [WordSearchComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(WordSearchComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges(); //component = new WordSearchComponent(null, null); // pass null as arguments for userIDService and http\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should display the list of words to find', () => {\n    const wordsList = fixture.nativeElement.querySelector('.words-list');\n    expect(wordsList.textContent).toContain('apple');\n    expect(wordsList.textContent).toContain('banana');\n    expect(wordsList.textContent).toContain('cherry');\n  });\n  it('should display the grid of letters', () => {\n    const lettersGrid = fixture.nativeElement.querySelector('.letters-grid');\n    expect(lettersGrid.textContent).toContain('A');\n    expect(lettersGrid.textContent).toContain('B');\n    expect(lettersGrid.textContent).toContain('C');\n  });\n  it('should initialize the timer to 0:00', () => {\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n  it('should display the lowest time when available', () => {\n    component.lowestTime = {\n      minutes: 1,\n      seconds: 30\n    };\n    fixture.detectChanges();\n    const lowestTime = fixture.nativeElement.querySelector('.lowest-time');\n    expect(lowestTime.textContent).toContain('1:30');\n  });\n  it('should not display the lowest time when not available', () => {\n    component.lowestTime = null;\n    fixture.detectChanges();\n    const lowestTime = fixture.nativeElement.querySelector('.lowest-time');\n    expect(lowestTime.textContent).toContain('Lowest Time:');\n  });\n  it('should limit possible words to 10 letters', () => {\n    expect(component.possibleWords.every(word => word.length <= 10)).toBe(true);\n  });\n  it('should generate a grid with correct dimensions and letters', () => {\n    component.words = ['APPLE', 'BANANA', 'CHERRY', 'PEAR', 'WATERMELON'];\n    component.generateGrid();\n    expect(component.grid.length).toBe(10);\n    expect(component.grid.every(row => row.length === 25)).toBe(true);\n    const allLetters = component.grid.flat().join('');\n    expect(allLetters).toMatch(/^[A-Z]{250}$/); // grid should contain only capital letters\n\n    for (const word of component.words) {\n      const found = component.grid.some(row => row.join('').includes(word.charAt(0)));\n      expect(found).toBe(true); // each word should be present in the grid\n    }\n  });\n  it('should return null when word cannot be placed', () => {\n    component.grid = [['A', 'P', 'P', 'L', 'E'], ['B', '', '', '', ''], ['C', '', '', '', ''], ['D', '', '', '', ''], ['E', '', '', '', '']];\n    const positions = component.canPlaceWord('BANANA', 0, 0, 1, 1);\n    expect(positions).toBe(null); // BANANA overlaps with APPLE\n  });\n  it('should start the timer', () => {\n    component.startTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n    expect(component.timer).toBeTruthy();\n  });\n  it('should stop the timer', () => {\n    component.startTimer();\n    component.stopTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n  it('should reset the game', () => {\n    component.reset();\n    expect(component.highlightedWords.length).toBe(0);\n    expect(component.coords.length).toBe(0);\n    expect(component.wordsFound).toBe(0);\n    expect(component.start).toBeFalsy();\n    expect(component.words.length).toBe(5);\n    expect(component.grid.length).toBe(10);\n    expect(component.grid[0].length).toBe(25);\n    expect(component.newRecord).toBeFalsy();\n  });\n});","map":{"version":3,"mappings":"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","names":["WordSearchComponent","TestBed","HttpClientTestingModule","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","wordsList","nativeElement","querySelector","textContent","toContain","lettersGrid","minutes","toBe","seconds","lowestTime","possibleWords","every","word","length","words","generateGrid","grid","row","allLetters","flat","join","toMatch","found","some","includes","charAt","positions","canPlaceWord","startTimer","timer","stopTimer","reset","highlightedWords","coords","wordsFound","start","toBeFalsy","newRecord"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/word-search/word-search.component.spec.ts"],"sourcesContent":["import { WordSearchComponent } from './word-search.component';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\n\ndescribe('WordSearchComponent', () => {\n  let component: WordSearchComponent;\n  let fixture: ComponentFixture<WordSearchComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [WordSearchComponent]\n    }).compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(WordSearchComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    //component = new WordSearchComponent(null, null); // pass null as arguments for userIDService and http\n  });\n\n\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should display the list of words to find', () => {\n    const wordsList = fixture.nativeElement.querySelector('.words-list');\n    expect(wordsList.textContent).toContain('apple');\n    expect(wordsList.textContent).toContain('banana');\n    expect(wordsList.textContent).toContain('cherry');\n  });\n\n  it('should display the grid of letters', () => {\n    const lettersGrid = fixture.nativeElement.querySelector('.letters-grid');\n    expect(lettersGrid.textContent).toContain('A');\n    expect(lettersGrid.textContent).toContain('B');\n    expect(lettersGrid.textContent).toContain('C');\n  });\n\n  it('should initialize the timer to 0:00', () => {\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n\n  it('should display the lowest time when available', () => {\n    component.lowestTime = { minutes: 1, seconds: 30 };\n    fixture.detectChanges();\n    const lowestTime = fixture.nativeElement.querySelector('.lowest-time');\n    expect(lowestTime.textContent).toContain('1:30');\n  });\n\n  it('should not display the lowest time when not available', () => {\n    component.lowestTime = null;\n    fixture.detectChanges();\n    const lowestTime = fixture.nativeElement.querySelector('.lowest-time');\n    expect(lowestTime.textContent).toContain('Lowest Time:');\n  });\n\n\n\n\n\n  it('should limit possible words to 10 letters', () => {\n    expect(component.possibleWords.every(word => word.length <= 10)).toBe(true);\n  });\n\n  it('should generate a grid with correct dimensions and letters', () => {\n    component.words = ['APPLE', 'BANANA', 'CHERRY', 'PEAR', 'WATERMELON'];\n    component.generateGrid();\n    expect(component.grid.length).toBe(10);\n    expect(component.grid.every(row => row.length === 25)).toBe(true);\n    const allLetters = component.grid.flat().join('');\n    expect(allLetters).toMatch(/^[A-Z]{250}$/); // grid should contain only capital letters\n    for (const word of component.words) {\n      const found = component.grid.some(row =>\n        row.join('').includes(word.charAt(0))\n      );\n      expect(found).toBe(true); // each word should be present in the grid\n    }\n  });\n\n  it('should return null when word cannot be placed', () => {\n    component.grid = [['A', 'P', 'P', 'L', 'E'], ['B', '', '', '', ''], ['C', '', '', '', ''], ['D', '', '', '', ''], ['E', '', '', '', '']];\n    const positions = component.canPlaceWord('BANANA', 0, 0, 1, 1);\n    expect(positions).toBe(null); // BANANA overlaps with APPLE\n  });\n\n  it('should start the timer', () => {\n    component.startTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n    expect(component.timer).toBeTruthy();\n  });\n\n\n  it('should stop the timer', () => {\n    component.startTimer();\n    component.stopTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n\n\n  it('should reset the game', () => {\n    component.reset();\n    expect(component.highlightedWords.length).toBe(0);\n    expect(component.coords.length).toBe(0);\n    expect(component.wordsFound).toBe(0);\n    expect(component.start).toBeFalsy();\n    expect(component.words.length).toBe(5);\n    expect(component.grid.length).toBe(10);\n    expect(component.grid[0].length).toBe(25);\n    expect(component.newRecord).toBeFalsy();\n  });\n\n\n})"]},"metadata":{},"sourceType":"module"}