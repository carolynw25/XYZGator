{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WordSearchComponent = class WordSearchComponent {\n  constructor() {\n    this.words = ['HHHHH', 'ZZZZZZZ', 'PPPPPPP'];\n    this.grid = [];\n    this.columnNum = 20;\n    this.rowNum = 10; // Variables to store the starting and ending positions of the highlight\n\n    this.startRow = null;\n    this.startCol = null;\n    this.endRow = null;\n    this.endCol = null;\n    this.selectedStartIndex = null;\n    this.selectedEndIndex = null;\n  }\n\n  ngOnInit() {\n    this.generateGrid();\n  }\n\n  canPlaceWord(word, startX, startY, directionX, directionY) {\n    // Check if the word can be placed in the grid\n    const positions = [];\n    let x = startX;\n    let y = startY;\n\n    for (const letter of word) {\n      if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n        return null;\n      }\n\n      positions.push([y, x]);\n      x += directionX;\n      y += directionY;\n    }\n\n    return positions;\n  }\n\n  generateGrid() {\n    // Generate an empty grid of letters\n    for (let i = 0; i < this.rowNum; i++) {\n      this.grid.push([]);\n\n      for (let j = 0; j < this.columnNum; j++) {\n        this.grid[i].push('');\n      }\n    } // Place each word in the grid (if possible)\n\n\n    let allWordsPlaced = false;\n\n    while (!allWordsPlaced) {\n      allWordsPlaced = true;\n\n      for (let word of this.words) {\n        let wordPlaced = false; // Try to place the word in the grid in all possible directions\n\n        for (let directionX = -1; directionX <= 1 && !wordPlaced; directionX++) {\n          for (let directionY = -1; directionY <= 1 && !wordPlaced; directionY++) {\n            if (directionX === 0 && directionY === 0) {\n              continue;\n            } // Generate a random starting position for the word in the current direction\n\n\n            const startX = Math.floor(Math.random() * this.rowNum);\n            const startY = Math.floor(Math.random() * this.columnNum);\n            const positions = this.canPlaceWord(word, startX, startY, directionX, directionY); // If the word can be placed, place it in the grid\n\n            if (positions) {\n              let canPlace = true;\n\n              for (const [y, x] of positions) {\n                if (this.grid[y][x] !== '') {\n                  canPlace = false;\n                  break;\n                }\n              }\n\n              if (canPlace) {\n                for (const [y, x] of positions) {\n                  this.grid[y][x] = word.charAt(0).toUpperCase();\n                  word = word.slice(1);\n                }\n\n                wordPlaced = true;\n              }\n            }\n          }\n        } // If the word couldn't be placed, reset the grid and start over\n\n\n        if (!wordPlaced) {\n          allWordsPlaced = false;\n          this.grid = [];\n\n          for (let i = 0; i < this.rowNum; i++) {\n            this.grid.push([]);\n\n            for (let j = 0; j < this.columnNum; j++) {\n              this.grid[i].push('');\n            }\n          }\n\n          break;\n        }\n      }\n    } // Fill the remaining empty spaces with random letters\n\n\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    for (let i = 0; i < this.rowNum; i++) {\n      for (let j = 0; j < this.columnNum; j++) {\n        if (this.grid[i][j] === '') {\n          const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\n          this.grid[i][j] = randomLetter;\n        }\n      }\n    }\n  } // selectLetter(rowIndex: number, colIndex: number): void {\n  //   if (this.selectedStartIndex === null) {\n  //     // Set the start index if it hasn't been set yet\n  //     this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n  //     this.startRow = rowIndex;\n  //     this.startCol = colIndex;\n  //   } else if (this.selectedEndIndex === null) {\n  //     // Set the end index if it hasn't been set yet\n  //     this.selectedEndIndex = colIndex + rowIndex * this.columnNum;\n  //     this.endRow = rowIndex;\n  //     this.endCol = colIndex;\n  //     // Highlight the selected letters\n  //     const start = Math.min(this.selectedStartIndex, this.selectedEndIndex);\n  //     const end = Math.max(this.selectedStartIndex, this.selectedEndIndex);\n  //     const selectedCells = document.querySelectorAll('td');\n  //     selectedCells.forEach((cell, index) => {\n  //       if (index >= start && index <= end) {\n  //         cell.classList.add('selected');\n  //       } else {\n  //         cell.classList.remove('selected');\n  //       }\n  //     });\n  //     // Clear the selection\n  //     this.selectedStartIndex = null;\n  //     this.selectedEndIndex = null;\n  //     this.startRow = null;\n  //     this.startCol = null;\n  //     this.endRow = null;\n  //     this.endCol = null;\n  //   }\n  // }\n  // isSelected(row: number, col: number): boolean {\n  //   if (this.startRow === null || this.startCol === null || this.endRow === null || this.endCol === null) {\n  //     // No selection has been made yet\n  //     return false;\n  //   }\n  //   if (row < Math.min(this.startRow, this.endRow) || row > Math.max(this.startRow, this.endRow)) {\n  //     // The current row is outside the selected range\n  //     return false;\n  //   }\n  //   if (col < Math.min(this.startCol, this.endCol) || col > Math.max(this.startCol, this.endCol)) {\n  //     // The current column is outside the selected range\n  //     return false;\n  //   }\n  //   return true;\n  // }\n\n\n  selectLetter(rowIndex, colIndex) {\n    if (this.selectedStartIndex === null) {\n      // Set the start index if it hasn't been set yet\n      this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n      this.startRow = rowIndex;\n      this.startCol = colIndex; // Set the end index to highlight the whole column\n\n      this.selectedEndIndex = colIndex + (this.rowNum - 1) * this.columnNum;\n      this.endRow = this.rowNum - 1;\n      this.endCol = colIndex;\n    } else if (this.selectedEndIndex === null) {\n      // Set the end index if it hasn't been set yet\n      this.selectedEndIndex = colIndex + rowIndex * this.columnNum;\n      this.endRow = rowIndex;\n      this.endCol = colIndex;\n    } else {\n      // Clear the start and end indices if both have been set\n      this.selectedStartIndex = colIndex + rowIndex * this.columnNum;\n      this.startRow = rowIndex;\n      this.startCol = colIndex;\n      this.selectedEndIndex = null;\n      this.endRow = null;\n      this.endCol = null;\n    }\n  }\n\n  isSelected(rowIndex, colIndex) {\n    const index = colIndex + rowIndex * this.columnNum;\n    return index >= Math.min(this.selectedStartIndex, this.selectedEndIndex) && index <= Math.max(this.selectedStartIndex, this.selectedEndIndex) && (colIndex === this.startCol || colIndex === this.endCol);\n  }\n\n};\nWordSearchComponent = __decorate([Component({\n  selector: 'app-word-search',\n  template: `\n<div class =\"outer\">\n <table>\n   <tr *ngFor=\"let row of grid\">\n    <td \n    *ngFor=\"let letter of row; let colIndex = index\n    [class.selected]=\"isSelected(rowIndex, colIndex)\"\n    (click)=\"selectLetter(rowIndex, colIndex)\">{{ letter }}</td>\n   </tr>\n </table>\n</div>\n`,\n  styles: [`\n .outer {\n   padding: 20px;\n   min-height: 100vh;\n   background-color: lavender;\n }\n td {\n  border: 1px solid #ccc;\n  padding: 5px;\n  font-size: 20px;\n  font-family: 'Arial', sans-serif;\n  background-color: #fff;\n}\ntd.selected {\n  background-color: yellow;\n}\n\n `]\n})], WordSearchComponent);\nexport { WordSearchComponent };","map":null,"metadata":{},"sourceType":"module"}