{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { PictureGuessComponent } from './picture-guess.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\ndescribe('PictureGuessComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [PictureGuessComponent],\n      providers: [UserIdService]\n    }).compileComponents();\n    fixture = TestBed.createComponent(PictureGuessComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    httpMock = TestBed.inject(HttpTestingController);\n    userIdService = TestBed.inject(UserIdService);\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should initialize correctly', () => {\n    expect(component.pictures.length).toBeGreaterThan(0);\n    expect(component.answers.length).toEqual(47);\n    expect(component.imageNames.length).toBeGreaterThan(0);\n    expect(component.score).toEqual(0);\n    expect(component.highScore).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n  });\n  it('should load pictures correctly', () => {\n    expect(component.pictures[0].url).toContain('assets/img/pictureGame/');\n  });\n  it('should generate answer choices correctly', () => {\n    expect(component.answers.length).toEqual(47);\n  });\n  it('should select next question correctly', () => {\n    const initialSelection = component.selection;\n    component.nextQuestion(); //equal?\n\n    expect(component.selection).toEqual(initialSelection);\n  }); // it('should check answer correctly', () => {\n  //   spyOn(Swal, 'fire').and.callFake(() => Promise.resolve({ isConfirmed: true }));\n  //   spyOn(component, 'nextQuestion');\n  //   component.checkAnswer(component.answers[0]);\n  //   expect(component.score).toBeGreaterThan(0);\n  //   expect(Swal.fire).toHaveBeenCalled();\n  //   expect(component.nextQuestion).toHaveBeenCalled();\n  // });\n\n  it('should reset game correctly', () => {\n    spyOn(component, 'bigReset');\n    spyOn(component, 'reset');\n    component.bigReset();\n    expect(component.highScore).toEqual(0);\n    expect(component.score).toEqual(0);\n    expect(component.newRecord).toBeFalsy(); //expect(component.reset).toHaveBeenCalled();\n  });\n  it('should handle errors during http requests', () => {\n    const http = TestBed.inject(HttpClient);\n    spyOn(http, 'get').and.returnValue(of(null));\n    spyOn(console, 'error');\n    component.ngOnInit(); //expect(console.error).toHaveBeenCalled();\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","HttpClientTestingModule","HttpTestingController","PictureGuessComponent","UserIdService","HttpClient","of","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","providers","compileComponents","createComponent","componentInstance","detectChanges","httpMock","inject","userIdService","it","expect","toBeTruthy","pictures","length","toBeGreaterThan","answers","toEqual","imageNames","score","highScore","newRecord","toBeFalsy","url","toContain","initialSelection","selection","nextQuestion","spyOn","bigReset","http","and","returnValue","console","ngOnInit"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/picture-guess/picture-guess.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule,HttpTestingController } from '@angular/common/http/testing';\nimport { PictureGuessComponent } from './picture-guess.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport Swal from 'sweetalert2';\n\n\ndescribe('PictureGuessComponent', () => {\n  let component: PictureGuessComponent;\n  let fixture: ComponentFixture<PictureGuessComponent>;\n  \n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [ PictureGuessComponent ],\n      providers: [UserIdService]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(PictureGuessComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n\n    httpMock = TestBed.inject(HttpTestingController);\n    userIdService = TestBed.inject(UserIdService) as jasmine.SpyObj<UserIdService>;\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should initialize correctly', () => {\n    expect(component.pictures.length).toBeGreaterThan(0);\n    expect(component.answers.length).toEqual(47);\n    expect(component.imageNames.length).toBeGreaterThan(0);\n    expect(component.score).toEqual(0);\n    expect(component.highScore).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n  });\n\n  it('should load pictures correctly', () => {\n    expect(component.pictures[0].url).toContain('assets/img/pictureGame/');\n  });\n\n  it('should generate answer choices correctly', () => {\n    expect(component.answers.length).toEqual(47);\n  });\n\n  it('should select next question correctly', () => {\n    const initialSelection = component.selection;\n    component.nextQuestion();\n    //equal?\n    expect(component.selection).toEqual(initialSelection);\n  });\n\n  // it('should check answer correctly', () => {\n  //   spyOn(Swal, 'fire').and.callFake(() => Promise.resolve({ isConfirmed: true }));\n  //   spyOn(component, 'nextQuestion');\n  //   component.checkAnswer(component.answers[0]);\n  //   expect(component.score).toBeGreaterThan(0);\n  //   expect(Swal.fire).toHaveBeenCalled();\n  //   expect(component.nextQuestion).toHaveBeenCalled();\n  // });\n\n  it('should reset game correctly', () => {\n    spyOn(component, 'bigReset');\n    spyOn(component, 'reset');\n    component.bigReset();\n    expect(component.highScore).toEqual(0);\n    expect(component.score).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n    //expect(component.reset).toHaveBeenCalled();\n  });\n\n  it('should handle errors during http requests', () => {\n    const http = TestBed.inject(HttpClient);\n    spyOn(http, 'get').and.returnValue(of(null));\n    spyOn(console, 'error');\n    component.ngOnInit();\n    //expect(console.error).toHaveBeenCalled();\n  });\n\n\n\n});\n"]},"metadata":{},"sourceType":"module"}