{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { PictureGuessComponent } from './picture-guess.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport Swal from 'sweetalert2';\ndescribe('PictureGuessComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [PictureGuessComponent],\n      providers: [UserIdService]\n    }).compileComponents();\n    fixture = TestBed.createComponent(PictureGuessComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should initialize correctly', () => {\n    expect(component.pictures.length).toBeGreaterThan(0);\n    expect(component.answers.length).toEqual(47);\n    expect(component.imageNames.length).toBeGreaterThan(0);\n    expect(component.score).toEqual(0);\n    expect(component.highScore).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n  });\n  it('should load pictures correctly', () => {\n    expect(component.pictures[0].url).toContain('assets/img/pictureGame/');\n  });\n  it('should generate answer choices correctly', () => {\n    expect(component.answers.length).toEqual(47);\n  });\n  it('should check answer correctly', () => {\n    spyOn(Swal, 'fire').and.callFake(() => Promise.resolve({\n      isConfirmed: true\n    }));\n    spyOn(component, 'nextQuestion');\n    component.checkAnswer(component.answers[0]);\n    expect(component.score).toBeGreaterThan(0);\n    expect(Swal.fire).toHaveBeenCalled();\n    expect(component.nextQuestion).toHaveBeenCalled();\n  });\n  it('should reset game correctly', () => {\n    spyOn(component, 'bigReset');\n    spyOn(component, 'reset');\n    component.bigReset();\n    expect(component.highScore).toEqual(0);\n    expect(component.score).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n    expect(component.reset).toHaveBeenCalled();\n  });\n  it('should handle errors during http requests', () => {\n    const http = TestBed.inject(HttpClient);\n    spyOn(http, 'get').and.returnValue(of(null));\n    spyOn(console, 'error');\n    component.ngOnInit();\n    expect(console.error).toHaveBeenCalled();\n  });\n});\n;","map":{"version":3,"mappings":"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","names":["TestBed","HttpClientTestingModule","PictureGuessComponent","UserIdService","HttpClient","of","Swal","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","providers","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","pictures","length","toBeGreaterThan","answers","toEqual","imageNames","score","highScore","newRecord","toBeFalsy","url","toContain","spyOn","and","callFake","Promise","resolve","isConfirmed","checkAnswer","fire","toHaveBeenCalled","nextQuestion","bigReset","reset","http","inject","returnValue","console","ngOnInit","error"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/picture-guess/picture-guess.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\nimport { PictureGuessComponent } from './picture-guess.component';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { of } from 'rxjs';\nimport Swal from 'sweetalert2';\n\n\ndescribe('PictureGuessComponent', () => {\n  let component: PictureGuessComponent;\n  let fixture: ComponentFixture<PictureGuessComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      declarations: [ PictureGuessComponent ],\n      providers: [UserIdService]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(PictureGuessComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should initialize correctly', () => {\n    expect(component.pictures.length).toBeGreaterThan(0);\n    expect(component.answers.length).toEqual(47);\n    expect(component.imageNames.length).toBeGreaterThan(0);\n    expect(component.score).toEqual(0);\n    expect(component.highScore).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n  });\n\n  it('should load pictures correctly', () => {\n    expect(component.pictures[0].url).toContain('assets/img/pictureGame/');\n  });\n\n  it('should generate answer choices correctly', () => {\n    expect(component.answers.length).toEqual(47);\n  });\n\n  it('should check answer correctly', () => {\n    spyOn(Swal, 'fire').and.callFake(() => Promise.resolve({ isConfirmed: true }));\n    spyOn(component, 'nextQuestion');\n    component.checkAnswer(component.answers[0]);\n    expect(component.score).toBeGreaterThan(0);\n    expect(Swal.fire).toHaveBeenCalled();\n    expect(component.nextQuestion).toHaveBeenCalled();\n  });\n\n  it('should reset game correctly', () => {\n    spyOn(component, 'bigReset');\n    spyOn(component, 'reset');\n    component.bigReset();\n    expect(component.highScore).toEqual(0);\n    expect(component.score).toEqual(0);\n    expect(component.newRecord).toBeFalsy();\n    expect(component.reset).toHaveBeenCalled();\n  });\n\n  it('should handle errors during http requests', () => {\n    const http = TestBed.inject(HttpClient);\n    spyOn(http, 'get').and.returnValue(of(null));\n    spyOn(console, 'error');\n    component.ngOnInit();\n    expect(console.error).toHaveBeenCalled();\n  });\n\n});\n\n\n\n\n\n\n\n\n\n\n});\n"]},"metadata":{},"sourceType":"module"}