{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { NavbarComponent } from './navbar.component';\ndescribe('NavbarComponent', () => {\n  let component;\n  let fixture;\n  let debugElement;\n  let htmlElement;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [NavbarComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NavbarComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    debugElement = fixture.debugElement;\n    htmlElement = debugElement.nativeElement;\n  });\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should toggle the sidebar when navbar-toggler is clicked', () => {\n    spyOn(component, 'sidebarToggle');\n    const navbarToggler = debugElement.query(By.css('.navbar-toggler')).nativeElement;\n    navbarToggler.click();\n    expect(component.sidebarToggle).toHaveBeenCalled();\n  }); //the little carrot bit i believe\n\n  it('should have a button to toggle the sidebar', () => {\n    const navbarToggle = debugElement.query(By.css('.navbar-toggle')).nativeElement;\n    expect(navbarToggle).toBeTruthy();\n  }); // checks if the nc-bell-55 element exists in the HTML.\n\n  it('should have a bell icon to access account notifications', () => {\n    const bellIcon = debugElement.query(By.css('.nc-bell-55')).nativeElement;\n    expect(bellIcon).toBeTruthy();\n  }); //checks if the nc-settings-gear-65 element exists in the HTML.\n\n  it('should have a cog icon to access account settings', () => {\n    const cogIcon = debugElement.query(By.css('.nc-settings-gear-65')).nativeElement;\n    expect(cogIcon).toBeTruthy();\n  }); //checks that each dropdown goes to the correct place, whether that's the\n  //login or register page\n\n  it('should have a dropdown menu with correct links', () => {\n    const dropdownMenu = debugElement.query(By.css('.dropdown-menu')).nativeElement;\n    const dropdownItems = dropdownMenu.querySelectorAll('a'); // Check the number of items in the dropdown menu\n\n    expect(dropdownItems.length).toBe(3); // Check the links in the dropdown menu\n\n    expect(dropdownItems[0].getAttribute('routerLink')).toBe('/login');\n    expect(dropdownItems[1].getAttribute('routerLink')).toBe('/signup');\n    expect(dropdownItems[2].getAttribute('routerLink')).toBe('/login');\n  });\n});\n/*\n //\n  it('should have a navbar with a title', () => {\n    const title = component.getTitle();\n    const navbarBrand = debugElement.query(By.css('.navbar-brand')).nativeElement;\n    expect(navbarBrand.textContent).toContain(title);\n  });\n*/","map":{"version":3,"mappings":"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","names":["TestBed","By","RouterTestingModule","NavbarComponent","describe","component","fixture","debugElement","htmlElement","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","detectChanges","nativeElement","it","expect","toBeTruthy","spyOn","navbarToggler","query","css","click","sidebarToggle","toHaveBeenCalled","navbarToggle","bellIcon","cogIcon","dropdownMenu","dropdownItems","querySelectorAll","length","toBe","getAttribute"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/shared/navbar/navbar.component.spec.ts"],"sourcesContent":["import { TestBed, ComponentFixture } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { DebugElement } from '@angular/core';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { NavbarComponent } from './navbar.component';\n\ndescribe('NavbarComponent', () => {\n  let component: NavbarComponent;\n  let fixture: ComponentFixture<NavbarComponent>;\n  let debugElement: DebugElement;\n  let htmlElement: HTMLElement;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [ NavbarComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(NavbarComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n    debugElement = fixture.debugElement;\n    htmlElement = debugElement.nativeElement;\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should toggle the sidebar when navbar-toggler is clicked', () => {\n    spyOn(component, 'sidebarToggle');\n    const navbarToggler = debugElement.query(By.css('.navbar-toggler')).nativeElement;\n    navbarToggler.click();\n    expect(component.sidebarToggle).toHaveBeenCalled();\n  });\n\n  //the little carrot bit i believe\n  it('should have a button to toggle the sidebar', () => {\n    const navbarToggle = debugElement.query(By.css('.navbar-toggle')).nativeElement;\n    expect(navbarToggle).toBeTruthy();\n  });\n\n  // checks if the nc-bell-55 element exists in the HTML.\n  it('should have a bell icon to access account notifications', () => {\n    const bellIcon = debugElement.query(By.css('.nc-bell-55')).nativeElement;\n    expect(bellIcon).toBeTruthy();\n  });\n\n  //checks if the nc-settings-gear-65 element exists in the HTML.\n  it('should have a cog icon to access account settings', () => {\n    const cogIcon = debugElement.query(By.css('.nc-settings-gear-65')).nativeElement;\n    expect(cogIcon).toBeTruthy();\n  });\n\n  //checks that each dropdown goes to the correct place, whether that's the\n  //login or register page\n  it('should have a dropdown menu with correct links', () => {\n    const dropdownMenu = debugElement.query(By.css('.dropdown-menu')).nativeElement;\n    const dropdownItems = dropdownMenu.querySelectorAll('a');\n\n    // Check the number of items in the dropdown menu\n    expect(dropdownItems.length).toBe(3);\n\n    // Check the links in the dropdown menu\n    expect(dropdownItems[0].getAttribute('routerLink')).toBe('/login');\n    expect(dropdownItems[1].getAttribute('routerLink')).toBe('/signup');\n    expect(dropdownItems[2].getAttribute('routerLink')).toBe('/login');\n\n  });\n\n});\n\n\n\n/*\n //\n  it('should have a navbar with a title', () => {\n    const title = component.getTitle();\n    const navbarBrand = debugElement.query(By.css('.navbar-brand')).nativeElement;\n    expect(navbarBrand.textContent).toContain(title);\n  });\n*/"]},"metadata":{},"sourceType":"module"}