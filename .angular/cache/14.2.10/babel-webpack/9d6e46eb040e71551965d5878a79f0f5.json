{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { CardComponent } from './card.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Router } from '@angular/router';\ndescribe('CardComponent', () => {\n  let component;\n  let fixture;\n  let router;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [CardComponent]\n    }).compileComponents();\n    fixture = TestBed.createComponent(CardComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    const navigateByUrlSpy = spyOn(router, 'navigateByUrl');\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should generate cards correctly', () => {\n    expect(component.cards.length).toBeGreaterThan(0);\n    expect(component.cards.length).toBe(28);\n\n    for (let i = 0; i < component.cards.length; i++) {\n      const card = component.cards[i];\n      expect(card.id).toBeDefined();\n      expect(card.isFlipped).toBeFalsy();\n      expect(card.isMatched).toBeFalsy();\n      expect(card.color).toBeDefined();\n    }\n  });\n  it('should flip card when clicked', () => {\n    const card = component.cards[0];\n    spyOn(component, 'flipCard');\n    const cardElement = fixture.nativeElement.querySelector('.card');\n    cardElement.click();\n    expect(component.flipCard).toHaveBeenCalledWith(card);\n    expect(!card.isFlipped).toBeTruthy();\n  });\n  it('should identify matching cards', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isMatched).toBeTruthy();\n    expect(!card2.isMatched).toBeTruthy();\n  });\n  it('should flip unmatched cards back over', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[2];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isFlipped).toBeFalsy();\n    expect(!card2.isFlipped).toBeFalsy();\n  });\n  it('should reset game', () => {\n    spyOn(component, 'reset');\n    const resetButton = fixture.nativeElement.querySelector('.reset button');\n    resetButton.click();\n    expect(component.reset).toHaveBeenCalled();\n    expect(component.disableCards).toBeFalsy();\n  });\n  it('should match cards with the same color', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    card1.color = 'red';\n    card2.color = 'red';\n    fixture.detectChanges();\n    const cards = fixture.debugElement.queryAll(By.css('.card'));\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(false);\n    cards[0].triggerEventHandler('click', null);\n    cards[1].triggerEventHandler('click', null);\n    fixture.detectChanges();\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[0].nativeElement.classList.contains('matched')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('matched')).toBe(false);\n  });\n  it('should navigate to notifications page when Return button is clicked', () => {\n    const navigateByUrlSpy = spyOn(router, 'navigateByUrl');\n    const returnButton = fixture.debugElement.query(By.css('button')).nativeElement;\n    returnButton.click();\n    fixture.detectChanges();\n    expect(navigateByUrlSpy).toHaveBeenCalledWith('/notifications'); // Reset the spy\n\n    navigateByUrlSpy.calls.reset();\n  });\n});","map":{"version":3,"mappings":"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","names":["TestBed","By","CardComponent","RouterTestingModule","Router","describe","component","fixture","router","beforeEach","configureTestingModule","imports","declarations","compileComponents","createComponent","componentInstance","inject","navigateByUrlSpy","spyOn","detectChanges","it","expect","toBeTruthy","cards","length","toBeGreaterThan","toBe","i","card","id","toBeDefined","isFlipped","toBeFalsy","isMatched","color","cardElement","nativeElement","querySelector","click","flipCard","toHaveBeenCalledWith","card1","card2","resetButton","reset","toHaveBeenCalled","disableCards","debugElement","queryAll","css","classList","contains","triggerEventHandler","returnButton","query","calls"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/card/card.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { CardComponent } from './card.component';\nimport { RouterTestingModule } from '@angular/router/testing';\nimport { Router } from '@angular/router';\n\n\ndescribe('CardComponent', () => {\n  let component: CardComponent;\n  let fixture: ComponentFixture<CardComponent>;\n  let router: Router;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [ CardComponent ],\n    }).compileComponents();\n    fixture = TestBed.createComponent(CardComponent);\n    component = fixture.componentInstance;\n    router = TestBed.inject(Router);\n    const navigateByUrlSpy = spyOn(router, 'navigateByUrl');\n    fixture.detectChanges();\n  });\n  \n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should generate cards correctly', () => {\n    expect(component.cards.length).toBeGreaterThan(0);\n    expect(component.cards.length).toBe(28);\n    for (let i = 0; i < component.cards.length; i++) {\n      const card = component.cards[i];\n      expect(card.id).toBeDefined();\n      expect(card.isFlipped).toBeFalsy();\n      expect(card.isMatched).toBeFalsy();\n      expect(card.color).toBeDefined();\n    }\n  });\n\n  it('should flip card when clicked', () => {\n    const card = component.cards[0];\n    spyOn(component, 'flipCard');\n    const cardElement = fixture.nativeElement.querySelector('.card');\n    cardElement.click();\n    expect(component.flipCard).toHaveBeenCalledWith(card);\n    expect(!card.isFlipped).toBeTruthy();\n  });\n\n  it('should identify matching cards', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isMatched).toBeTruthy();\n    expect(!card2.isMatched).toBeTruthy();\n  });\n\n  it('should flip unmatched cards back over', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[2];\n    component.flipCard(card1);\n    component.flipCard(card2);\n    expect(!card1.isFlipped).toBeFalsy();\n    expect(!card2.isFlipped).toBeFalsy();\n  });\n\n  it('should reset game', () => {\n    spyOn(component, 'reset');\n    const resetButton = fixture.nativeElement.querySelector('.reset button');\n    resetButton.click();\n    expect(component.reset).toHaveBeenCalled();\n    expect(component.disableCards).toBeFalsy();\n  });\n\n  it('should match cards with the same color', () => {\n    const card1 = component.cards[0];\n    const card2 = component.cards[1];\n    card1.color = 'red';\n    card2.color = 'red';\n    fixture.detectChanges();\n    const cards = fixture.debugElement.queryAll(By.css('.card'));\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(false);\n    cards[0].triggerEventHandler('click', null);\n    cards[1].triggerEventHandler('click', null);\n    fixture.detectChanges();\n    expect(cards[0].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[1].nativeElement.classList.contains('flipped')).toBe(true);\n    expect(cards[0].nativeElement.classList.contains('matched')).toBe(false);\n    expect(cards[1].nativeElement.classList.contains('matched')).toBe(false);\n  });\n\n  it('should navigate to notifications page when Return button is clicked', () => {\n    const navigateByUrlSpy = spyOn(router, 'navigateByUrl');\n    const returnButton = fixture.debugElement.query(By.css('button')).nativeElement;\n  \n    returnButton.click();\n    fixture.detectChanges();\n  \n    expect(navigateByUrlSpy).toHaveBeenCalledWith('/notifications');\n  \n    // Reset the spy\n    navigateByUrlSpy.calls.reset();\n  });\n  \n\n\n})"]},"metadata":{},"sourceType":"module"}