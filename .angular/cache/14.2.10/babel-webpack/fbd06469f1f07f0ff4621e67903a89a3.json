{"ast":null,"code":"import { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { take } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"app/userIdService\";\nimport * as i2 from \"@angular/common/http\";\nexport let DashboardComponent = /*#__PURE__*/(() => {\n  class DashboardComponent {\n    constructor(userIDService, http) {\n      this.userIDService = userIDService;\n      this.http = http;\n      this.lowestTimeMemory = null;\n      this.scoreMath = 0;\n      this.scoreWord = 0;\n      this.scorePicture = 0;\n    }\n\n    updateLowestTimeMemory(sec) {\n      if (sec >= 60) {\n        this.lowestTime = {\n          minutes: Math.floor(sec / 60),\n          seconds: sec % 60\n        };\n      } else {\n        this.lowestTime = {\n          minutes: 0,\n          seconds: sec\n        };\n      }\n    }\n\n    updateLowestTimeMemory(sec) {\n      if (sec >= 60) {\n        this.lowestTime = {\n          minutes: Math.floor(sec / 60),\n          seconds: sec % 60\n        };\n      } else {\n        this.lowestTime = {\n          minutes: 0,\n          seconds: sec\n        };\n      }\n    }\n\n    getUserScoreMemory(ID) {\n      const url = 'http://127.0.0.1:8080/api/users/' + ID + '/matchscore';\n      return this.http.get(url);\n    }\n\n    getUserScoreMath(ID) {\n      const url = 'http://127.0.0.1:8080/api/users/' + ID + '/mathscore';\n      return this.http.get(url);\n    }\n\n    getUserScoreWord(ID) {\n      const url = 'http://127.0.0.1:8080/api/users/' + ID + '/wordscore';\n      return this.http.get(url);\n    }\n\n    getUserScorePicture(ID) {\n      const url = 'http://127.0.0.1:8080/api/users/' + ID + '/animalscore';\n      return this.http.get(url);\n    }\n\n    ngOnInit() {\n      this.userID = this.userIDService.getUserId();\n      console.log('User ID ohmygoditworked: ', this.userID); // Memory\n\n      this.getUserScoreMemory(this.userID).pipe(take(1) // take only the first value emitted by the observable\n      ).subscribe(score => {\n        if (score == 999999999999999) {\n          this.scoreMemory = null;\n        } else {\n          this.scoreMemory = score;\n        }\n      }); // Math\n\n      this.getUserScoreMath(this.userID).pipe(take(1) // take only the first value emitted by the observable\n      ).subscribe(score => {\n        this.scoreMath = score;\n\n        if (this.scoreMath < 0) {\n          this.scoreMath = 0;\n        }\n      }); // Word Search\n\n      this.getUserScoreWord(this.userID).pipe(take(1) // take only the first value emitted by the observable\n      ).subscribe(score => {\n        if (score == 99999999999999999) {\n          this.scoreWord = null;\n        } else {\n          this.scoreWord = score;\n        }\n      }); // Picture\n\n      this.getUserScorePicture(this.userID).pipe(take(1) // take only the first value emitted by the observable\n      ).subscribe(score => {\n        this.scorePicture = score;\n\n        if (this.scorePicture < 0) {\n          this.scorePicture = 0;\n        }\n      });\n    }\n\n  }\n\n  DashboardComponent.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.UserIdService), i0.ɵɵdirectiveInject(i2.HttpClient));\n  };\n\n  DashboardComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"dashboard-cmp\"]],\n    decls: 50,\n    vars: 5,\n    consts: [[1, \"hi\"], [1, \"cards\"], [1, \"card1\"], [1, \"card\", \"card-stats\"], [1, \"card-body\"], [1, \"row\"], [1, \"col-5\", \"col-md-4\"], [1, \"icon-big\", \"text-center\", \"icon-warning\"], [1, \"nc-icon\", \"nc-favourite-28\", \"text-primary\"], [1, \"col-7\", \"col-md-8\"], [1, \"numbers\"], [1, \"card-category\"], [1, \"card-title\"], [1, \"card-footer\"], [1, \"card2\"], [1, \"nc-icon\", \"nc-vector\", \"text-danger\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\");\n        i0.ɵɵtext(2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"br\")(4, \"div\");\n        i0.ɵɵelementStart(5, \"div\", 1)(6, \"div\", 2)(7, \"div\", 3)(8, \"div\", 4)(9, \"div\", 5)(10, \"div\", 6)(11, \"div\", 7);\n        i0.ɵɵelement(12, \"i\", 8);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(13, \"div\", 9)(14, \"div\", 10)(15, \"p\", 11);\n        i0.ɵɵtext(16, \"Today's Fun Fact\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\", 12);\n        i0.ɵɵtext(18, \" A baby alligator is called a hatchling \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(19, \"p\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelement(20, \"div\", 13);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"div\", 14)(22, \"div\", 3)(23, \"div\", 4)(24, \"div\", 5)(25, \"div\", 6)(26, \"div\", 7);\n        i0.ɵɵelement(27, \"i\", 15);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(28, \"div\", 9)(29, \"div\", 10)(30, \"p\", 12);\n        i0.ɵɵtext(31, \"Your Scores:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(32, \"p\", 11);\n        i0.ɵɵtext(33, \"Memory Score:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(34, \"p\", 12);\n        i0.ɵɵtext(35);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(36, \"p\");\n        i0.ɵɵelementStart(37, \"p\", 11);\n        i0.ɵɵtext(38, \"Math Score \");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(39, \"p\");\n        i0.ɵɵelementStart(40, \"p\", 12);\n        i0.ɵɵtext(41);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(42, \"p\", 11);\n        i0.ɵɵtext(43, \"Wordsearch Score\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(44, \"p\", 12);\n        i0.ɵɵtext(45);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(46, \"p\", 11);\n        i0.ɵɵtext(47, \"Animal scorePicture\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(48, \"p\", 12);\n        i0.ɵɵtext(49);\n        i0.ɵɵelementEnd()()()()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Hello, \", ctx.userID, \" \");\n        i0.ɵɵadvance(33);\n        i0.ɵɵtextInterpolate1(\"\", ctx.scoreMemory, \" \");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.scoreMath);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.scoreWord);\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate(ctx.scorePicture);\n      }\n    },\n    styles: [\".cards[_ngcontent-%COMP%]{display:flex;flex-wrap:wrap;justify-content:center}.card[_ngcontent-%COMP%]{flex:1;margin:10px;max-width:400px}\"]\n  });\n  return DashboardComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}