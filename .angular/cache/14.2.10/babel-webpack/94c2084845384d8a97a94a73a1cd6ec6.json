{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { WordSearchComponent } from './word-search.component';\ndescribe('WordSearchComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    component = new WordSearchComponent(null, null); // pass null as arguments for userIDService and http\n  }));\n  it('should limit possible words to 10 letters', () => {\n    expect(component.possibleWords.every(word => word.length <= 10)).toBe(true);\n  });\n  it('should generate a grid with correct dimensions and letters', () => {\n    component.words = ['APPLE', 'BANANA', 'CHERRY', 'PEAR', 'WATERMELON'];\n    component.generateGrid();\n    expect(component.grid.length).toBe(10);\n    expect(component.grid.every(row => row.length === 25)).toBe(true);\n    const allLetters = component.grid.flat().join('');\n    expect(allLetters).toMatch(/^[A-Z]{250}$/); // grid should contain only capital letters\n\n    for (const word of component.words) {\n      const found = component.grid.some(row => row.join('').includes(word.charAt(0)));\n      expect(found).toBe(true); // each word should be present in the grid\n    }\n  });\n  it('should return null when word cannot be placed', () => {\n    component.grid = [['A', 'P', 'P', 'L', 'E'], ['B', '', '', '', ''], ['C', '', '', '', ''], ['D', '', '', '', ''], ['E', '', '', '', '']];\n    const positions = component.canPlaceWord('BANANA', 0, 0, 1, 1);\n    expect(positions).toBe(null); // BANANA overlaps with APPLE\n  });\n  it('should start the timer', () => {\n    component.startTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n    expect(component.timer).toBeTruthy();\n  });\n  it('should stop the timer', () => {\n    component.startTimer();\n    component.stopTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n  it('should reset the game', () => {\n    component.reset();\n    expect(component.highlightedWords.length).toBe(0);\n    expect(component.coords.length).toBe(0);\n    expect(component.wordsFound).toBe(0);\n    expect(component.start).toBeFalsy();\n    expect(component.words.length).toBe(5);\n    expect(component.grid.length).toBe(10);\n    expect(component.grid[0].length).toBe(25);\n    expect(component.newRecord).toBeFalsy();\n  });\n});","map":{"version":3,"mappings":"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","names":["WordSearchComponent","describe","component","fixture","beforeEach","it","expect","possibleWords","every","word","length","toBe","words","generateGrid","grid","row","allLetters","flat","join","toMatch","found","some","includes","charAt","positions","canPlaceWord","startTimer","minutes","seconds","timer","toBeTruthy","stopTimer","reset","highlightedWords","coords","wordsFound","start","toBeFalsy","newRecord"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/word-search/word-search.component.spec.ts"],"sourcesContent":["import { WordSearchComponent } from './word-search.component';\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule } from '@angular/common/http/testing';\n\ndescribe('WordSearchComponent', () => {\n  let component: WordSearchComponent;\n  let fixture: ComponentFixture<WordSearchComponent>;\n\n  beforeEach(async () => {\n    component = new WordSearchComponent(null, null); // pass null as arguments for userIDService and http\n  });\n\n  it('should limit possible words to 10 letters', () => {\n    expect(component.possibleWords.every(word => word.length <= 10)).toBe(true);\n  });\n\n  it('should generate a grid with correct dimensions and letters', () => {\n    component.words = ['APPLE', 'BANANA', 'CHERRY', 'PEAR', 'WATERMELON'];\n    component.generateGrid();\n    expect(component.grid.length).toBe(10);\n    expect(component.grid.every(row => row.length === 25)).toBe(true);\n    const allLetters = component.grid.flat().join('');\n    expect(allLetters).toMatch(/^[A-Z]{250}$/); // grid should contain only capital letters\n    for (const word of component.words) {\n      const found = component.grid.some(row =>\n        row.join('').includes(word.charAt(0))\n      );\n      expect(found).toBe(true); // each word should be present in the grid\n    }\n  });\n\n  it('should return null when word cannot be placed', () => {\n    component.grid = [['A', 'P', 'P', 'L', 'E'], ['B', '', '', '', ''], ['C', '', '', '', ''], ['D', '', '', '', ''], ['E', '', '', '', '']];\n    const positions = component.canPlaceWord('BANANA', 0, 0, 1, 1);\n    expect(positions).toBe(null); // BANANA overlaps with APPLE\n  });\n\n  it('should start the timer', () => {\n    component.startTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n    expect(component.timer).toBeTruthy();\n  });\n\n\n  it('should stop the timer', () => {\n    component.startTimer();\n    component.stopTimer();\n    expect(component.minutes).toBe(0);\n    expect(component.seconds).toBe(0);\n  });\n\n\n  it('should reset the game', () => {\n    component.reset();\n    expect(component.highlightedWords.length).toBe(0);\n    expect(component.coords.length).toBe(0);\n    expect(component.wordsFound).toBe(0);\n    expect(component.start).toBeFalsy();\n    expect(component.words.length).toBe(5);\n    expect(component.grid.length).toBe(10);\n    expect(component.grid[0].length).toBe(25);\n    expect(component.newRecord).toBeFalsy();\n  });\n\n\n})"]},"metadata":{},"sourceType":"module"}