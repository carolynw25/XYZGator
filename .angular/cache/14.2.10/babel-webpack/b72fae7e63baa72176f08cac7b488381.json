{"ast":null,"code":"import _asyncToGenerator from \"/Users/dantasbradley/Documents/GitHub/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { DashboardComponent } from './dashboard.component';\ndescribe('DashboardComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [DashboardComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(DashboardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create the dashboard component', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should have a title with GatorXYZ', () => {\n    const title = fixture.nativeElement.querySelector('h2');\n    expect(title.textContent).toContain('GatorXYZ');\n  });\n  it('should have a line break after the title', () => {\n    const br = fixture.nativeElement.querySelector('br');\n    expect(br).toBeTruthy();\n  });\n  it('should have two cards', () => {\n    const cards = fixture.nativeElement.querySelectorAll('.card');\n    expect(cards.length).toEqual(2);\n  });\n  it('should display the correct memory score', () => {\n    component.lowestTimeMemory = {\n      minutes: 1,\n      seconds: 30\n    };\n    fixture.detectChanges();\n    const memoryScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(2) + p');\n    expect(memoryScore.textContent).toContain('1:30');\n  });\n  it('should display \"-\" if there is no memory score', () => {\n    component.lowestTimeMemory = null;\n    fixture.detectChanges();\n    const memoryScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(2) + p');\n    expect(memoryScore.textContent).toContain('-');\n  });\n  it('should display the correct wordsearch score', () => {\n    component.lowestTimeWord = {\n      minutes: 0,\n      seconds: 45\n    };\n    fixture.detectChanges();\n    const wordsearchScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(4) + p');\n    expect(wordsearchScore.textContent).toContain('0:45');\n  });\n  it('should display \"-\" if there is no wordsearch score', () => {\n    component.lowestTimeWord = null;\n    fixture.detectChanges();\n    const wordsearchScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(4) + p');\n    expect(wordsearchScore.textContent).toContain('-');\n  });\n});","map":{"version":3,"mappings":";AAAA,SAA2BA,OAA3B,QAA0C,uBAA1C;AACA,SAASC,kBAAT,QAAmC,uBAAnC;AAGAC,QAAQ,CAAC,oBAAD,EAAuB,MAAK;EAClC,IAAIC,SAAJ;EACA,IAAIC,OAAJ;EAEAC,UAAU,iCAAC,aAAW;IACpB,MAAML,OAAO,CAACM,sBAAR,CAA+B;MACnCC,YAAY,EAAE,CAAEN,kBAAF;IADqB,CAA/B,EAGLO,iBAHK,EAAN;EAID,CALS,EAAV;EAOAH,UAAU,CAAC,MAAK;IACdD,OAAO,GAAGJ,OAAO,CAACS,eAAR,CAAwBR,kBAAxB,CAAV;IACAE,SAAS,GAAGC,OAAO,CAACM,iBAApB;IACAN,OAAO,CAACO,aAAR;EACD,CAJS,CAAV;EAMAC,EAAE,CAAC,uCAAD,EAA0C,MAAK;IAC/CC,MAAM,CAACV,SAAD,CAAN,CAAkBW,UAAlB;EACD,CAFC,CAAF;EAIAF,EAAE,CAAC,mCAAD,EAAsC,MAAK;IAC3C,MAAMG,KAAK,GAAGX,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,IAApC,CAAd;IACAJ,MAAM,CAACE,KAAK,CAACG,WAAP,CAAN,CAA0BC,SAA1B,CAAoC,UAApC;EACD,CAHC,CAAF;EAKAP,EAAE,CAAC,0CAAD,EAA6C,MAAK;IAClD,MAAMQ,EAAE,GAAGhB,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,IAApC,CAAX;IACAJ,MAAM,CAACO,EAAD,CAAN,CAAWN,UAAX;EACD,CAHC,CAAF;EAKAF,EAAE,CAAC,uBAAD,EAA0B,MAAK;IAC/B,MAAMS,KAAK,GAAGjB,OAAO,CAACY,aAAR,CAAsBM,gBAAtB,CAAuC,OAAvC,CAAd;IACAT,MAAM,CAACQ,KAAK,CAACE,MAAP,CAAN,CAAqBC,OAArB,CAA6B,CAA7B;EACD,CAHC,CAAF;EAKAZ,EAAE,CAAC,yCAAD,EAA4C,MAAK;IACjDT,SAAS,CAACsB,gBAAV,GAA6B;MAAEC,OAAO,EAAE,CAAX;MAAcC,OAAO,EAAE;IAAvB,CAA7B;IACAvB,OAAO,CAACO,aAAR;IACA,MAAMiB,WAAW,GAAGxB,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,6CAApC,CAApB;IACAJ,MAAM,CAACe,WAAW,CAACV,WAAb,CAAN,CAAgCC,SAAhC,CAA0C,MAA1C;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,gDAAD,EAAmD,MAAK;IACxDT,SAAS,CAACsB,gBAAV,GAA6B,IAA7B;IACArB,OAAO,CAACO,aAAR;IACA,MAAMiB,WAAW,GAAGxB,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,6CAApC,CAApB;IACAJ,MAAM,CAACe,WAAW,CAACV,WAAb,CAAN,CAAgCC,SAAhC,CAA0C,GAA1C;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,6CAAD,EAAgD,MAAK;IACrDT,SAAS,CAAC0B,cAAV,GAA2B;MAAEH,OAAO,EAAE,CAAX;MAAcC,OAAO,EAAE;IAAvB,CAA3B;IACAvB,OAAO,CAACO,aAAR;IACA,MAAMmB,eAAe,GAAG1B,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,6CAApC,CAAxB;IACAJ,MAAM,CAACiB,eAAe,CAACZ,WAAjB,CAAN,CAAoCC,SAApC,CAA8C,MAA9C;EACD,CALC,CAAF;EAOAP,EAAE,CAAC,oDAAD,EAAuD,MAAK;IAC5DT,SAAS,CAAC0B,cAAV,GAA2B,IAA3B;IACAzB,OAAO,CAACO,aAAR;IACA,MAAMmB,eAAe,GAAG1B,OAAO,CAACY,aAAR,CAAsBC,aAAtB,CAAoC,6CAApC,CAAxB;IACAJ,MAAM,CAACiB,eAAe,CAACZ,WAAjB,CAAN,CAAoCC,SAApC,CAA8C,GAA9C;EACD,CALC,CAAF;AAMD,CA/DO,CAAR","names":["TestBed","DashboardComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","title","nativeElement","querySelector","textContent","toContain","br","cards","querySelectorAll","length","toEqual","lowestTimeMemory","minutes","seconds","memoryScore","lowestTimeWord","wordsearchScore"],"sourceRoot":"","sources":["/Users/dantasbradley/Documents/GitHub/CEN3031Proj/src/app/pages/dashboard/dashboard.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { DashboardComponent } from './dashboard.component';\nimport { HttpClient } from '@angular/common/http';\n\ndescribe('DashboardComponent', () => {\n  let component: DashboardComponent;\n  let fixture: ComponentFixture<DashboardComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ DashboardComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(DashboardComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create the dashboard component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should have a title with GatorXYZ', () => {\n    const title = fixture.nativeElement.querySelector('h2');\n    expect(title.textContent).toContain('GatorXYZ');\n  });\n\n  it('should have a line break after the title', () => {\n    const br = fixture.nativeElement.querySelector('br');\n    expect(br).toBeTruthy();\n  });\n\n  it('should have two cards', () => {\n    const cards = fixture.nativeElement.querySelectorAll('.card');\n    expect(cards.length).toEqual(2);\n  });\n\n  it('should display the correct memory score', () => {\n    component.lowestTimeMemory = { minutes: 1, seconds: 30 };\n    fixture.detectChanges();\n    const memoryScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(2) + p');\n    expect(memoryScore.textContent).toContain('1:30');\n  });\n\n  it('should display \"-\" if there is no memory score', () => {\n    component.lowestTimeMemory = null;\n    fixture.detectChanges();\n    const memoryScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(2) + p');\n    expect(memoryScore.textContent).toContain('-');\n  });\n\n  it('should display the correct wordsearch score', () => {\n    component.lowestTimeWord = { minutes: 0, seconds: 45 };\n    fixture.detectChanges();\n    const wordsearchScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(4) + p');\n    expect(wordsearchScore.textContent).toContain('0:45');\n  });\n\n  it('should display \"-\" if there is no wordsearch score', () => {\n    component.lowestTimeWord = null;\n    fixture.detectChanges();\n    const wordsearchScore = fixture.nativeElement.querySelector('.card-body p.card-category:nth-child(4) + p');\n    expect(wordsearchScore.textContent).toContain('-');\n  });\n});\n"]},"metadata":{},"sourceType":"module"}