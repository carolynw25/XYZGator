{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { SignupComponent } from './signup.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\ndescribe('SignupComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [SignupComponent],\n      imports: [FormsModule, ReactiveFormsModule, HttpClientModule]\n    }).compileComponents();\n    fixture = TestBed.createComponent(SignupComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  }); //Test case to check if addUser() function adds a new user to the user list\n\n  it('should add a new user to the user list when addUser() is called', () => {\n    const initialUserCount = component.userInfo.length;\n    component.username = 'tUser';\n    component.password = 'tPass';\n    component.firstname = 'Huey';\n    component.lastname = 'Magooey';\n    component.email = 'HuMagoo@gmail.com';\n    component.addUser();\n    const newUserCount = component.userInfo.length;\n    expect(newUserCount).toEqual(initialUserCount + 1);\n    expect(component.userInfo[newUserCount - 1]).toEqual({\n      username: 'tUser',\n      password: 'tPass',\n      firstname: 'Huey',\n      lastname: 'Magooey',\n      email: 'HuMagoo@gmail.com'\n    });\n  }); //Test case to check if the input fields are cleared after addUser() is called\n\n  it('should clear the input fields after addUser() is called', () => {\n    component.username = 'tUser';\n    component.password = 'tPass';\n    component.firstname = 'Huey';\n    component.lastname = 'Magooey';\n    component.email = 'HuMagoo@gmail.com';\n    component.addUser();\n    expect(component.username).toEqual('');\n    expect(component.password).toEqual('');\n    expect(component.firstname).toEqual('');\n    expect(component.lastname).toEqual('');\n    expect(component.email).toEqual('');\n  });\n});","map":{"version":3,"mappings":";AAAA,SAA2BA,OAA3B,QAA0C,uBAA1C;AAEA,SAASC,eAAT,QAAgC,oBAAhC;AACA,SAASC,WAAT,EAAsBC,mBAAtB,QAAiD,gBAAjD;AAGAC,QAAQ,CAAC,iBAAD,EAAoB,MAAK;EAC/B,IAAIC,SAAJ;EACA,IAAIC,OAAJ;EAEAC,UAAU,iCAAC,aAAW;IACpB,MAAMP,OAAO,CAACQ,sBAAR,CAA+B;MACnCC,YAAY,EAAE,CAAER,eAAF,CADqB;MAEnCS,OAAO,EAAE,CAAER,WAAF,EAAeC,mBAAf,EAAoCQ,gBAApC;IAF0B,CAA/B,EAILC,iBAJK,EAAN;IAMAN,OAAO,GAAGN,OAAO,CAACa,eAAR,CAAwBZ,eAAxB,CAAV;IACAI,SAAS,GAAGC,OAAO,CAACQ,iBAApB;IACAR,OAAO,CAACS,aAAR;EACD,CAVS,EAAV;EAYAC,EAAE,CAAC,eAAD,EAAkB,MAAK;IACvBC,MAAM,CAACZ,SAAD,CAAN,CAAkBa,UAAlB;EACD,CAFC,CAAF,CAhB+B,CAoB/B;;EACAF,EAAE,CAAC,iEAAD,EAAoE,MAAK;IACzE,MAAMG,gBAAgB,GAAGd,SAAS,CAACe,QAAV,CAAmBC,MAA5C;IACAhB,SAAS,CAACiB,QAAV,GAAqB,OAArB;IACAjB,SAAS,CAACkB,QAAV,GAAqB,OAArB;IACAlB,SAAS,CAACmB,SAAV,GAAsB,MAAtB;IACAnB,SAAS,CAACoB,QAAV,GAAqB,SAArB;IACApB,SAAS,CAACqB,KAAV,GAAkB,mBAAlB;IACArB,SAAS,CAACsB,OAAV;IACA,MAAMC,YAAY,GAAGvB,SAAS,CAACe,QAAV,CAAmBC,MAAxC;IACAJ,MAAM,CAACW,YAAD,CAAN,CAAqBC,OAArB,CAA6BV,gBAAgB,GAAG,CAAhD;IACAF,MAAM,CAACZ,SAAS,CAACe,QAAV,CAAmBQ,YAAY,GAAG,CAAlC,CAAD,CAAN,CAA6CC,OAA7C,CAAqD;MACnDP,QAAQ,EAAE,OADyC;MAEnDC,QAAQ,EAAE,OAFyC;MAGnDC,SAAS,EAAE,MAHwC;MAInDC,QAAQ,EAAE,SAJyC;MAKnDC,KAAK,EAAE;IAL4C,CAArD;EAOD,CAjBC,CAAF,CArB+B,CAwC/B;;EACAV,EAAE,CAAC,yDAAD,EAA4D,MAAK;IACjEX,SAAS,CAACiB,QAAV,GAAqB,OAArB;IACAjB,SAAS,CAACkB,QAAV,GAAqB,OAArB;IACAlB,SAAS,CAACmB,SAAV,GAAsB,MAAtB;IACAnB,SAAS,CAACoB,QAAV,GAAqB,SAArB;IACApB,SAAS,CAACqB,KAAV,GAAkB,mBAAlB;IACArB,SAAS,CAACsB,OAAV;IACAV,MAAM,CAACZ,SAAS,CAACiB,QAAX,CAAN,CAA2BO,OAA3B,CAAmC,EAAnC;IACAZ,MAAM,CAACZ,SAAS,CAACkB,QAAX,CAAN,CAA2BM,OAA3B,CAAmC,EAAnC;IACAZ,MAAM,CAACZ,SAAS,CAACmB,SAAX,CAAN,CAA4BK,OAA5B,CAAoC,EAApC;IACAZ,MAAM,CAACZ,SAAS,CAACoB,QAAX,CAAN,CAA2BI,OAA3B,CAAmC,EAAnC;IACAZ,MAAM,CAACZ,SAAS,CAACqB,KAAX,CAAN,CAAwBG,OAAxB,CAAgC,EAAhC;EACD,CAZC,CAAF;AAeD,CAxDO,CAAR","names":["TestBed","SignupComponent","FormsModule","ReactiveFormsModule","describe","component","fixture","beforeEach","configureTestingModule","declarations","imports","HttpClientModule","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","initialUserCount","userInfo","length","username","password","firstname","lastname","email","addUser","newUserCount","toEqual"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/signup/signup.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\n\nimport { SignupComponent } from './signup.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { HttpClient } from '@angular/common/http';\n\ndescribe('SignupComponent', () => {\n  let component: SignupComponent;\n  let fixture: ComponentFixture<SignupComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ SignupComponent ],\n      imports: [ FormsModule, ReactiveFormsModule, HttpClientModule]\n    })\n    .compileComponents();\n\n    fixture = TestBed.createComponent(SignupComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  //Test case to check if addUser() function adds a new user to the user list\n  it('should add a new user to the user list when addUser() is called', () => {\n    const initialUserCount = component.userInfo.length;\n    component.username = 'tUser';\n    component.password = 'tPass';\n    component.firstname = 'Huey';\n    component.lastname = 'Magooey';\n    component.email = 'HuMagoo@gmail.com';\n    component.addUser();\n    const newUserCount = component.userInfo.length;\n    expect(newUserCount).toEqual(initialUserCount + 1);\n    expect(component.userInfo[newUserCount - 1]).toEqual({\n      username: 'tUser',\n      password: 'tPass',\n      firstname: 'Huey',\n      lastname: 'Magooey',\n      email: 'HuMagoo@gmail.com'\n    });\n  });\n\n  //Test case to check if the input fields are cleared after addUser() is called\n  it('should clear the input fields after addUser() is called', () => {\n    component.username = 'tUser';\n    component.password = 'tPass';\n    component.firstname = 'Huey';\n    component.lastname = 'Magooey';\n    component.email = 'HuMagoo@gmail.com';\n    component.addUser();\n    expect(component.username).toEqual('');\n    expect(component.password).toEqual('');\n    expect(component.firstname).toEqual('');\n    expect(component.lastname).toEqual('');\n    expect(component.email).toEqual('');\n  });\n\n  \n});\n"]},"metadata":{},"sourceType":"module"}