{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Swal from 'sweetalert2';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nlet MathComponent = class MathComponent {\n  constructor(router, route, userIDService, http, userService) {\n    this.router = router;\n    this.route = route;\n    this.userIDService = userIDService;\n    this.http = http;\n    this.userService = userService;\n    this.minutes = 1;\n    this.seconds = 0;\n    this.lowestTime = null;\n    this.newRecord = false;\n    this.rows = []; //numClicked = false;\n\n    this.numClicked = null;\n    this.numCorrect = 0;\n    this.highScore = 0; //the numbers\n\n    this.generateNumbers();\n    this.highScore = this.getUserScore(this.userID); //start timer\n\n    this.stopTimer();\n    this.startTimer(); //numbers\n\n    this.number1 = Math.floor(Math.random() * 15) + 1;\n    this.number2 = Math.floor(Math.random() * 15) + 1; //new record\n\n    this.newRecord = false;\n  }\n\n  generateNumbers() {\n    let currentRow = [];\n    let currentNum = 1;\n\n    for (let i = 1; i <= 3; i++) {\n      for (let j = 1; j <= 10; j++) {\n        currentRow.push(currentNum);\n        currentNum++;\n      }\n\n      this.rows.push(currentRow);\n      currentRow = [];\n    }\n  }\n\n  checkSum(clickedNumber) {\n    if (this.minutes === 0 && this.seconds === 0) {} else {\n      if (clickedNumber === this.number1 + this.number2) {\n        this.numCorrect++; // Swal.fire({\n        //   title: 'Congratulations!',\n        //   text: `You clicked ${clickedNumber}, which is the sum of ${this.number1} and ${this.number2}.`,\n        //   icon: 'success'\n        // });\n        // Change the number1 and number2 variables to generate a new problem\n\n        this.number1 = Math.floor(Math.random() * 15) + 1;\n        this.number2 = Math.floor(Math.random() * 15) + 1; // Reset the numClicked variable to null\n\n        this.numClicked = null; // Remove the \"incorrect\" class from all number elements\n\n        const numberElements = document.querySelectorAll('.number');\n        numberElements.forEach(element => {\n          element.classList.remove('incorrect');\n        });\n      } else {\n        const clickedElement = event.target;\n        clickedElement.classList.remove('clickable');\n        clickedElement.classList.add('incorrect'); //clickedElement.classList.add('correct');\n      }\n    }\n  }\n\n  ngOnInit() {\n    //removed to fix unit test, don't think it's needed maybe\n    //throw new Error('Method not implemented.');\n    this.userID = this.userIDService.getUserId();\n    console.log('User ID ohmygoditworked: ', this.userID);\n  }\n\n  getUserScore(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/mathscore';\n    return this.http.get(url);\n  }\n\n  reset() {\n    this.newRecord = false;\n    this.stopTimer();\n    this.startTimer();\n    this.numCorrect = 0;\n    this.newRecord = false; //numbers\n\n    this.number1 = Math.floor(Math.random() * 15) + 1;\n    this.number2 = Math.floor(Math.random() * 15) + 1; // Remove the \"incorrect\" class from all number elements\n\n    const numberElements = document.querySelectorAll('.number');\n    numberElements.forEach(element => {\n      element.classList.remove('incorrect');\n    });\n  }\n\n  startTimer() {\n    //count down from 1 minute\n    const startingTime = 60; // Start from 1 minute (60 seconds) (+ a second for loading time)\n\n    this.minutes = Math.floor(startingTime / 60);\n    this.seconds = startingTime % 60;\n    this.timer = setInterval(() => {\n      if (this.seconds > 0) {\n        this.seconds--;\n      } else {\n        this.seconds = 59;\n        this.minutes--;\n      }\n\n      if (this.minutes === 0 && this.seconds === 0 && this.router.url === '/game2') {\n        clearInterval(this.timer); //update high score\n\n        if (this.numCorrect > this.highScore) {\n          this.highScore = this.numCorrect;\n          this.newRecord = true;\n        }\n\n        Swal.fire({\n          title: `Time is up, You got ${this.numCorrect} questions right!`,\n          text: `HighScore ${this.highScore}${this.newRecord ? ' (newwwww)' : ''}`,\n          confirmButtonColor: '#3085d6',\n          confirmButtonText: 'OK',\n          padding: '3em',\n          color: '#716add',\n          allowOutsideClick: false,\n          //background: '#fab url(\"assets/img/cuteGator.png\")',\n          ...(this.newRecord ? {\n            backdrop: `\n            rgba(0,0,123,0.4)\n            url(\"assets/img/nyan-cat-gif.webp\")\n            left top\n            no-repeat\n          `\n          } : {})\n        });\n        return;\n      }\n    }, 1000); //counts up from 0\n    // this.timer = setInterval(() => {\n    //   if (this.seconds < 59) {\n    //     this.seconds++;\n    //   } else {\n    //     this.minutes++;\n    //     this.seconds = 0;\n    //   }\n    // }, 1000);\n  }\n\n  stopTimer() {\n    clearInterval(this.timer);\n    this.minutes = 0;\n    this.seconds = 0;\n  }\n\n};\nMathComponent = __decorate([Component({\n  selector: 'app-math',\n  template: `\n<div class =\"outer\">\n  <div class=\"top-bar\">\n  <div class=\"correct-count\">Current Score: {{ numCorrect }}</div>\n    <div class=\"highScore\"> High Score: {{ highScore }} </div>\n    <div class=\"reset\">\n      <button (click)=\"reset()\">Reset</button>\n    </div>\n    <div class=\"timer\"> timer: {{ minutes }}:{{ seconds | number: '2.0' }}</div>\n    <div class=\"return\">\n      <button (click)=\"stopTimer()\" routerLink=\"/notifications\">Return</button>\n    </div>\n  </div>\n  <div class=\"container\">\n    <div class=\"question\"> Solve: {{ number1 }} + {{ number2 }} </div>\n  </div>\n  <div *ngFor=\"let row of rows\" class=\"row\">\n    <div *ngFor=\"let num of row\" class=\"number\"\n    [ngClass]=\"{'incorrect': num === numClicked && num !== (number1 + number2), 'correct': num === numClicked && num === (number1 + number2), 'clickable': num === (number1 + number2)}\" \n    (click)=\"checkSum(num)\">{{ num }} </div>\n  </div>\n\n</div>\n`,\n  styles: [`\n.outer {\n  padding: 20px;\n  min-height: 100vh;\n  background-color: lavender;\n}\n.top-bar {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  margin-bottom: 40px;\n}\n.highScore{\n  font-size: 2rem;\n  text-align: left;\n  justify-content: flex-start;\n}\n.timer {\n  font-size: 2rem;\n  text-align: left;\n  justify-content: flex-start;\n}\n.reset{\n  font-size: 2rem;\n  margin-right: 20px;\n  justify-content: center;\n}\n.return{\n  font-size: 2rem;\n  margin-right: 20px;\n  justify-content: flex-end;\n}\n.container{\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n}\n.question{\n  background-color: white;\n  border: 10px solid rgb(166, 176, 183);\n  font-size: 4rem;\n  width: 770px;\n  text-align: center;\n  margin-bottom: 30px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  left: 100%;\n}\n.row {\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  margin-bottom: 15px;\n}\n.number {\n  background-color: rgb(219, 237, 252);\n  width: 70px;\n  height: 70px;\n  border: 2px solid rgb(166, 176, 183);\n  text-align: center;\n  margin-right: 15px;\n  margin-bottom: 15px;\n  cursor: pointer;\n  font-size: 2.2rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-weight: bold;\n  font-family: Arial, sans-serif;\n}\n\n.incorrect {\n  background-color: red;\n}\n.clickable {\n  cursor: pointer;\n}\n.correct {\n  background-color: green;\n}\n\n.correct-count {\n  font-size: 2rem;\n  text-align: left;\n\n}\n`]\n}), __metadata(\"design:paramtypes\", [Router, ActivatedRoute, UserIdService, HttpClient, typeof (_a = typeof UserService !== \"undefined\" && UserService) === \"function\" ? _a : Object])], MathComponent);\nexport { MathComponent };","map":null,"metadata":{},"sourceType":"module"}