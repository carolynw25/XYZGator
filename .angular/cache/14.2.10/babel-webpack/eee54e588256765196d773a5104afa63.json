{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WordSearchComponent = class WordSearchComponent {\n  constructor() {\n    this.words = ['HHHHH', 'ZZZZZZZ', 'PPPPPPP'];\n    this.grid = [];\n    this.columnNum = 20;\n    this.rowNum = 10; // Variables to store the starting and ending positions of the highlight\n\n    this.startRow = null;\n    this.startCol = null;\n    this.endRow = null;\n    this.endCol = null;\n  }\n\n  ngOnInit() {\n    this.generateGrid();\n  }\n\n  canPlaceWord(word, startX, startY, directionX, directionY) {\n    // Check if the word can be placed in the grid\n    const positions = [];\n    let x = startX;\n    let y = startY;\n\n    for (const letter of word) {\n      if (x < 0 || x >= 10 || y < 0 || y >= 10 || this.grid[y][x] !== '' && this.grid[y][x] !== letter) {\n        return null;\n      }\n\n      positions.push([y, x]);\n      x += directionX;\n      y += directionY;\n    }\n\n    return positions;\n  }\n\n  generateGrid() {\n    // Generate an empty grid of letters\n    for (let i = 0; i < this.rowNum; i++) {\n      this.grid.push([]);\n\n      for (let j = 0; j < this.columnNum; j++) {\n        this.grid[i].push('');\n      }\n    } // Place each word in the grid (if possible)\n\n\n    let allWordsPlaced = false;\n\n    while (!allWordsPlaced) {\n      allWordsPlaced = true;\n\n      for (let word of this.words) {\n        let wordPlaced = false; // Try to place the word in the grid in all possible directions\n\n        for (let directionX = -1; directionX <= 1 && !wordPlaced; directionX++) {\n          for (let directionY = -1; directionY <= 1 && !wordPlaced; directionY++) {\n            if (directionX === 0 && directionY === 0) {\n              continue;\n            } // Generate a random starting position for the word in the current direction\n\n\n            const startX = Math.floor(Math.random() * this.rowNum);\n            const startY = Math.floor(Math.random() * this.columnNum);\n            const positions = this.canPlaceWord(word, startX, startY, directionX, directionY); // If the word can be placed, place it in the grid\n\n            if (positions) {\n              let canPlace = true;\n\n              for (const [y, x] of positions) {\n                if (this.grid[y][x] !== '') {\n                  canPlace = false;\n                  break;\n                }\n              }\n\n              if (canPlace) {\n                for (const [y, x] of positions) {\n                  this.grid[y][x] = word.charAt(0).toUpperCase();\n                  word = word.slice(1);\n                }\n\n                wordPlaced = true;\n              }\n            }\n          }\n        } // If the word couldn't be placed, reset the grid and start over\n\n\n        if (!wordPlaced) {\n          allWordsPlaced = false;\n          this.grid = [];\n\n          for (let i = 0; i < this.rowNum; i++) {\n            this.grid.push([]);\n\n            for (let j = 0; j < this.columnNum; j++) {\n              this.grid[i].push('');\n            }\n          }\n\n          break;\n        }\n      }\n    } // Fill the remaining empty spaces with random letters\n\n\n    const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n    for (let i = 0; i < this.rowNum; i++) {\n      for (let j = 0; j < this.columnNum; j++) {\n        if (this.grid[i][j] === '') {\n          const randomLetter = letters.charAt(Math.floor(Math.random() * letters.length));\n          this.grid[i][j] = randomLetter;\n        }\n      }\n    }\n  }\n\n  startHighlight(event) {\n    // Get the row and column indices of the cell that was clicked\n    const cell = event.target;\n    const row = cell.parentElement;\n    this.startRow = row.rowIndex;\n    this.startCol = cell.cellIndex; // Clear any existing highlight\n\n    this.clearHighlight();\n  }\n\n  highlight(event) {\n    // If the mouse button is not pressed, do nothing\n    if (!event.buttons) {\n      return;\n    } // Get the row and column indices of the cell that the mouse is over\n\n\n    const cell = event.target;\n    const row = cell.parentElement;\n    const endRow = row.rowIndex;\n    const endCol = cell.cellIndex; // Update the ending position of the highlight\n\n    if (this.startRow !== null && this.startCol !== null) {\n      this.endRow = endRow;\n      this.endCol = endCol;\n    } // Highlight the cells between the starting and ending positions\n\n\n    this.updateHighlight();\n  }\n\n  endHighlight(event) {\n    // Clear the starting and ending positions of the highlight\n    this.startRow = null;\n    this.startCol = null;\n    this.endRow = null;\n    this.endCol = null;\n  }\n\n  clearHighlight() {\n    // Remove the \"highlight\" class from all cells in the grid\n    const cells = document.querySelectorAll('td');\n    cells.forEach(cell => cell.classList.remove('highlight'));\n  }\n\n  updateHighlight() {\n    // Get the coordinates of the starting and ending positions of the highlight\n    const [startX, endX] = [Math.min(this.startCol, this.endCol), Math.max(this.startCol, this.endCol)];\n    const [startY, endY] = [Math.min(this.startRow, this.endRow), Math.max(this.startRow, this.endRow)]; // Highlight the cells between the starting and ending positions\n\n    for (let i = startY; i <= endY; i++) {\n      for (let j = startX; j <= endX; j++) {\n        const cell = document.querySelector(`tr:nth-child(${i + 1}) td:nth-child(${j + 1})`);\n\n        if (cell) {\n          cell.classList.add('highlight');\n        }\n      }\n    }\n  }\n\n};\nWordSearchComponent = __decorate([Component({\n  selector: 'app-word-search',\n  template: `\n<div class =\"outer\">\n  <table>\n  <td *ngFor=\"let letter of row\" (mousedown)=\"startHighlight($event)\" \n    (mouseenter)=\"highlight($event)\" (mouseup)=\"endHighlight($event)\">{{ letter }}</td>\n\n    </tr>\n  </table>\n</div>\n`,\n  styles: [`\n .outer {\n   padding: 20px;\n   min-height: 100vh;\n   background-color: lavender;\n }\n td {\n  border: 1px solid #ccc;\n  padding: 5px;\n  font-size: 20px;\n  font-family: 'Arial', sans-serif;\n  background-color: #fff;\n}\ntd.selected {\n  background-color: yellow;\n}\n\n `]\n})], WordSearchComponent);\nexport { WordSearchComponent };","map":null,"metadata":{},"sourceType":"module"}