{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { MathComponent } from './math.component';\ndescribe('MathComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [MathComponent]\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MathComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should generate numbers for rows', () => {\n    component.generateNumbers();\n    expect(component.rows.length).toBeGreaterThan(0);\n  });\n  it('should check the sum of numbers on click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = null;\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(null);\n    component.checkSum(11);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(11);\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(2);\n    expect(component.numClicked).toBe(null);\n  });\n  it('should display correct and incorrect numbers', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    fixture.detectChanges();\n    const numbers = fixture.debugElement.queryAll(By.css('.number'));\n    expect(numbers.length).toBe(component.rows.flat().length);\n    const correctNumber = component.number1 + component.number2;\n    const correctNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === correctNumber.toString());\n    correctNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(correctNumberElement.nativeElement.classList).toContain('correct');\n    const incorrectNumber = component.rows.flat().find(num => num !== correctNumber);\n    const incorrectNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === incorrectNumber.toString());\n    incorrectNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(incorrectNumberElement.nativeElement.classList).toContain('incorrect');\n  });\n  it('should reset the game on reset button click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = 12;\n    component.numCorrect = 2;\n    spyOn(window, 'clearInterval');\n    component.reset();\n    expect(component.numClicked).toBe(null);\n    expect(component.numCorrect).toBe(0);\n    expect(window.clearInterval).toHaveBeenCalled();\n  });\n  it('should navigate to notifications page on return button click', () => {\n    spyOn(component['router'], 'navigate');\n    const returnButton = fixture.debugElement.query(By.css('.return button'));\n    returnButton.nativeElement.click();\n    expect(component['router'].navigate).toHaveBeenCalledWith(['/notifications']);\n  });\n}); //Auto Generated\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { MathComponent } from './math.component';\n// describe('MathComponent', () => {\n//   let component: MathComponent;\n//   let fixture: ComponentFixture<MathComponent>;\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       declarations: [ MathComponent ]\n//     })\n//     .compileComponents();\n//     fixture = TestBed.createComponent(MathComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });","map":{"version":3,"mappings":"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","names":["TestBed","By","MathComponent","describe","component","fixture","beforeEach","configureTestingModule","declarations","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","generateNumbers","rows","length","toBeGreaterThan","number1","number2","numClicked","checkSum","numCorrect","toBe","numbers","debugElement","queryAll","css","flat","correctNumber","correctNumberElement","find","num","nativeElement","textContent","trim","toString","click","classList","toContain","incorrectNumber","incorrectNumberElement","spyOn","window","reset","clearInterval","toHaveBeenCalled","returnButton","query","navigate","toHaveBeenCalledWith"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/math/math.component.spec.ts"],"sourcesContent":["\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport Swal from 'sweetalert2';\nimport { MathComponent } from './math.component';\n\ndescribe('MathComponent', () => {\n  let component: MathComponent;\n  let fixture: ComponentFixture<MathComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [ MathComponent ]\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MathComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should generate numbers for rows', () => {\n    component.generateNumbers();\n    expect(component.rows.length).toBeGreaterThan(0);\n  });\n\n  it('should check the sum of numbers on click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = null;\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(null);\n    component.checkSum(11);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(11);\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(2);\n    expect(component.numClicked).toBe(null);\n  });\n\n  it('should display correct and incorrect numbers', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    fixture.detectChanges();\n    const numbers = fixture.debugElement.queryAll(By.css('.number'));\n    expect(numbers.length).toBe(component.rows.flat().length);\n    const correctNumber = component.number1 + component.number2;\n    const correctNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === correctNumber.toString());\n    correctNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(correctNumberElement.nativeElement.classList).toContain('correct');\n    const incorrectNumber = component.rows.flat().find(num => num !== correctNumber);\n    const incorrectNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === incorrectNumber.toString());\n    incorrectNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(incorrectNumberElement.nativeElement.classList).toContain('incorrect');\n  });\n  \n\n  it('should reset the game on reset button click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = 12;\n    component.numCorrect = 2;\n    spyOn(window, 'clearInterval');\n    component.reset();\n    expect(component.numClicked).toBe(null);\n    expect(component.numCorrect).toBe(0);\n    expect(window.clearInterval).toHaveBeenCalled();\n  });\n\n  it('should navigate to notifications page on return button click', () => {\n    spyOn(component['router'], 'navigate');\n    const returnButton = fixture.debugElement.query(By.css('.return button'));\n    returnButton.nativeElement.click();\n    expect(component['router'].navigate).toHaveBeenCalledWith(['/notifications']);\n  });\n\n\n\n\n});\n\n\n\n\n\n//Auto Generated\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { MathComponent } from './math.component';\n\n// describe('MathComponent', () => {\n//   let component: MathComponent;\n//   let fixture: ComponentFixture<MathComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       declarations: [ MathComponent ]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(MathComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n"]},"metadata":{},"sourceType":"module"}