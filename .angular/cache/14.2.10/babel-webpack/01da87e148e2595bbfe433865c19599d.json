{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PictureGuessComponent = class PictureGuessComponent {\n  constructor() {\n    this.pictures = [];\n    this.selection = 0;\n    this.score = 0;\n    this.highScore = 0;\n    this.answers = [];\n    this.imageNames = [\"assets/img/pictureGame/alligator.png\", \"assets/img/pictureGame/alpaca.png\", \"assets/img/pictureGame/ant.png\", \"assets/img/pictureGame/armadillo.png\", \"assets/img/pictureGame/bat.png\", \"assets/img/pictureGame/bee.png\", \"assets/img/pictureGame/bird.png\", \"assets/img/pictureGame/butterfly.png\", \"assets/img/pictureGame/camel.png\", \"assets/img/pictureGame/cat.png\", \"assets/img/pictureGame/chicken.png\", \"assets/img/pictureGame/cow.png\", \"assets/img/pictureGame/crab.png\", \"assets/img/pictureGame/deer.png\", \"assets/img/pictureGame/dog.png\", \"assets/img/pictureGame/dolphin.png\", \"assets/img/pictureGame/donkey.png\", \"assets/img/pictureGame/duck.png\", \"assets/img/pictureGame/eagle.png\", \"assets/img/pictureGame/elephant.png\", \"assets/img/pictureGame/fish.png\", \"assets/img/pictureGame/flamingo.png\", \"assets/img/pictureGame/frog.png\", \"assets/img/pictureGame/goat.png\", \"assets/img/pictureGame/gorilla.png\", \"assets/img/pictureGame/hamster.png\", \"assets/img/pictureGame/horse.png\", \"assets/img/pictureGame/kangaroo.png\", \"assets/img/pictureGame/lion.png\", \"assets/img/pictureGame/monkey.png\", \"assets/img/pictureGame/owl.png\", \"assets/img/pictureGame/panda.png\", \"assets/img/pictureGame/penguin.png\", \"assets/img/pictureGame/pig.png\", \"assets/img/pictureGame/hedgehog.png\", \"assets/img/pictureGame/rabbit.png\", \"assets/img/pictureGame/raccoon.png\", \"assets/img/pictureGame/rat.png\", \"assets/img/pictureGame/skunk.png\", \"assets/img/pictureGame/snail.png\", \"assets/img/pictureGame/snake.png\", \"assets/img/pictureGame/spider.png\", \"assets/img/pictureGame/tiger.png\", \"assets/img/pictureGame/orca.png\", \"assets/img/pictureGame/zebra.png\", \"assets/img/pictureGame/otter.png\", \"assets/img/pictureGame/cheetah.png\"];\n    this.gameOver = false;\n    this.clickedAnswer = false;\n    this.indices = []; //let answerIndex = 0;\n\n    for (let i = 0; i < this.imageNames.length; i++) {\n      console.log(this.imageNames[i]);\n      const start = this.imageNames[i].lastIndexOf(\"/\") + 1;\n      const end = this.imageNames[i].lastIndexOf(\".png\");\n      this.pictures.push({\n        url: this.imageNames[i],\n        answer: this.imageNames[i].substring(start, end)\n      });\n      this.answers.push(this.imageNames[i].substring(start, end));\n    }\n\n    const x = Math.floor(Math.random() * this.pictures.length);\n    this.reset();\n  }\n\n  nextQuestion() {\n    //have a vector with numbers pointing to pictures index and then remove each time it has been passed\n    if (!this.gameOver && this.clickedAnswer) {\n      console.log(this.pictures);\n      console.log(this.selection);\n      this.pictures = this.pictures.filter(pictureObject => pictureObject.answer !== this.pictures[this.selection].answer);\n      console.log(this.pictures);\n      this.reset();\n    }\n  }\n\n  reset() {\n    this.selection = Math.floor(Math.random() * this.pictures.length); //this.pictures.splice(this.selection,1);\n    //this.pictures = this.pictures.filter(pictureObject => pictureObject.answer !== this.pictures[this.selection].answer);\n\n    this.clickedAnswer = false;\n    this.gameOver = false;\n    this.indices = [];\n    this.indices.push(this.answers.indexOf(this.pictures[this.selection].answer)); //find answer in selection for answer index\n\n    while (this.indices.length < 6) {\n      const index = Math.floor(Math.random() * this.pictures.length);\n\n      if (!this.indices.includes(index)) {\n        this.indices.push(index);\n      }\n    }\n\n    this.shuffle(); // Remove the \"incorrect\" class from all number elements\n\n    const numberElements = document.querySelectorAll('.answers');\n    numberElements.forEach(element => {\n      element.classList.remove('incorrect');\n      element.classList.remove('correct');\n    });\n  }\n\n  checkAnswer(answer) {\n    if (this.clickedAnswer == false) {\n      if (answer === this.pictures[this.selection].answer) {\n        const targetElement = event.target;\n        targetElement.classList.add('correct');\n        this.score++;\n        alert(\"Correct!\");\n      } else {\n        //incorrect\n        const targetElement = event.target;\n        targetElement.classList.add('incorrect');\n        alert(\"Incorrect!\");\n\n        if (this.highScore < this.score) {\n          this.highScore = this.score;\n        }\n\n        this.gameOver = true;\n        this.score = 0;\n      }\n    }\n\n    this.clickedAnswer = true;\n  }\n\n  shuffle() {\n    // Fisher-Yates shuffle\n    for (let i = this.indices.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.indices[i], this.indices[j]] = [this.indices[j], this.indices[i]];\n    }\n  }\n\n  ngOnInit() {}\n\n};\nPictureGuessComponent = __decorate([Component({\n  selector: 'app-picture-guess',\n  template: `\n <div class =\"outer\">\n  <div class=\"top-bar\">\n    <div class=\"lowestTime\">\n      <div class=\"score\">Current Score: {{ score }}</div>\n      <div class=\"highScore\"> High Score: {{ highScore }} </div>\n    </div>\n    <div class=\"reset\">\n      <button (click)=\"reset()\">Reset</button>\n    </div>\n    <div class=\"return\">\n      <button routerLink=\"/notifications\">Return</button>\n    </div>\n  </div>\n  <div class=\"image-container\">\n    <img [src]=\"pictures[selection].url\" class=\"picture\">\n    <button class = \"next\" (click)=\"nextQuestion()\">Next Question</button>\n</div>\n<div class=\"AnswerChoices\">\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[10])\">{{ answers[indices[0]] }}</button>\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[1]])\">{{ answers[indices[1]] }}</button>\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[2]])\">{{ answers[indices[2]] }}</button>\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[3]])\">{{ answers[indices[3]] }}</button>\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[4]])\">{{ answers[indices[4]] }}</button>\n  <button class = \"answers\" (click)=\"checkAnswer(answers[indices[5]])\">{{ answers[indices[5]] }}</button>\n  </div>\n  \n </div>\n  `,\n  styles: [`\n    .outer {\n      padding: 20px;\n      min-height: 100vh;\n      background-color: lavender;\n    }\n    .top-bar {\n      display: flex;\n      align-items: center;\n      justify-content: space-between;\n      margin-bottom: 40px;\n    }\n    .highScore{\n      font-size: 2rem;\n      text-align: left;\n      justify-content: flex-start;\n    }\n    .score {\n      font-size: 2rem;\n      text-align: left;\n      justify-content: flex-start;\n    }\n    .reset{\n      font-size: 2rem;\n      margin-right: 20px;\n      justify-content: center;\n    }\n    .return{\n      font-size: 2rem;\n      margin-right: 20px;\n      justify-content: flex-end;\n    }\n\n    .image-container {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    }\n    .picture {\n      width: auto;\n      height: 400px;\n      margin-bottom: 10px;\n    }\n    button {\n    margin-top: 10px;\n    }\n    .AnswerChoices {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: center;\n    }\n    .answers {\n      margin-right: 50px;\n      font-size: 20px;\n      padding: 10px;\n      font-weight: bold;\n      width: 180px; \n    }\n    .correct {\n      background-color: green;\n    }\n    .incorrect {\n      background-color: red;\n    }\n    .next {\n      margin-right: 50px;\n      font-size: 14px;\n      width: 180px; \n      height: 45px;\n      font-weight: bold;\n      align-items: center;\n      background-color: white;\n    }\n  `]\n}), __metadata(\"design:paramtypes\", [])], PictureGuessComponent);\nexport { PictureGuessComponent };","map":null,"metadata":{},"sourceType":"module"}