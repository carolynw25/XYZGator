{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PictureGuessComponent = class PictureGuessComponent {\n  constructor() {\n    this.pictures = [];\n    this.selection = 0;\n    this.imageNames = [\"assets/img/pictureGame/alligator.png\", \"assets/img/pictureGame/alpaca.png\", \"assets/img/pictureGame/ant.png\", \"assets/img/pictureGame/armadillo.png\", \"assets/img/pictureGame/bat.png\", \"assets/img/pictureGame/bee.png\", \"assets/img/pictureGame/bird.png\", \"assets/img/pictureGame/butterfly.png\", \"assets/img/pictureGame/camel.png\", \"assets/img/pictureGame/cat.png\", \"assets/img/pictureGame/chicken.png\", \"assets/img/pictureGame/cow.png\", \"assets/img/pictureGame/crab.png\", \"assets/img/pictureGame/deer.png\", \"assets/img/pictureGame/dog.png\", \"assets/img/pictureGame/dolphin.png\", \"assets/img/pictureGame/donkey.png\", \"assets/img/pictureGame/duck.png\", \"assets/img/pictureGame/eagle.png\", \"assets/img/pictureGame/elephant.png\", \"assets/img/pictureGame/fish.png\", \"assets/img/pictureGame/flamingo.png\", \"assets/img/pictureGame/frog.png\", \"assets/img/pictureGame/goat.png\", \"assets/img/pictureGame/gorilla.png\", \"assets/img/pictureGame/hamster.png\", \"assets/img/pictureGame/horse.png\", \"assets/img/pictureGame/kangaroo.png\", \"assets/img/pictureGame/lion.png\", \"assets/img/pictureGame/monkey.png\", \"assets/img/pictureGame/owl.png\", \"assets/img/pictureGame/panda.png\", \"assets/img/pictureGame/penguin.png\", \"assets/img/pictureGame/pig.png\", \"assets/img/pictureGame/hedgehog.png\", \"assets/img/pictureGame/rabbit.png\", \"assets/img/pictureGame/raccoon.png\", \"assets/img/pictureGame/rat.png\", \"assets/img/pictureGame/skunk.png\", \"assets/img/pictureGame/snail.png\", \"assets/img/pictureGame/snake.png\", \"assets/img/pictureGame/spider.png\", \"assets/img/pictureGame/tiger.png\", \"assets/img/pictureGame/whale.png\", \"assets/img/pictureGame/zebra.png\"];\n    this.indices = []; //let answerIndex = 0;\n\n    for (let i = 0; i < this.imageNames.length; i++) {\n      console.log(this.imageNames[i]);\n      const start = this.imageNames[i].lastIndexOf(\"/\") + 1;\n      const end = this.imageNames[i].lastIndexOf(\".png\");\n      this.pictures.push({\n        url: this.imageNames[i],\n        answer: this.imageNames[i].substring(start, end)\n      });\n    }\n\n    const x = Math.floor(Math.random() * this.pictures.length);\n    this.reset();\n  }\n\n  nextQuestion() {\n    //have a vector with numbers pointing to pictures index and then remove each time it has been passed\n    this.selection += 1;\n    this.reset();\n  }\n\n  reset() {\n    this.indices = [];\n    this.indices.push(this.selection);\n\n    while (this.indices.length < 6) {\n      const index = Math.floor(Math.random() * this.pictures.length);\n\n      if (!this.indices.includes(index)) {\n        this.indices.push(index);\n      }\n    }\n\n    this.shuffle();\n  }\n\n  checkAnswer(answer) {\n    if (answer === this.pictures[this.selection].answer) {\n      alert(\"Correct!\");\n    } else {\n      alert(\"Incorrect!\");\n    }\n  }\n\n  shuffle() {\n    // Fisher-Yates shuffle\n    for (let i = this.indices.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [this.indices[i], this.indices[j]] = [this.indices[j], this.indices[i]];\n    }\n  }\n\n  ngOnInit() {}\n\n};\nPictureGuessComponent = __decorate([Component({\n  selector: 'app-picture-guess',\n  template: `\n <div class =\"outer\">\n  <img [src]=\"pictures[selection].url\" class=\"picture\">\n  <div \n  <div class=\"AnswerChoices\">\n    <button (click)=\"nextQuestion()\">Next Question</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[0]].answer)\">{{ pictures[indices[0]].answer }}</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[1]].answer)\">{{ pictures[indices[1]].answer }}</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[2]].answer)\">{{ pictures[indices[2]].answer }}</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[3]].answer)\">{{ pictures[indices[3]].answer }}</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[4]].answer)\">{{ pictures[indices[4]].answer }}</button>\n  <button class = \"button-spacing\" (click)=\"checkAnswer(pictures[indices[5]].answer)\">{{ pictures[indices[5]].answer }}</button>\n  </div>\n  \n </div>\n  `,\n  styles: [`\n    .outer {\n      padding: 20px;\n      min-height: 100vh;\n      background-color: lavender;\n    }\n    .picture {\n      width: auto;\n      height: 400px;\n      margin-bottom: 10px;\n    }\n    .button-spacing {\n      margin-right: 50px;\n    }\n  `]\n}), __metadata(\"design:paramtypes\", [])], PictureGuessComponent);\nexport { PictureGuessComponent };","map":null,"metadata":{},"sourceType":"module"}