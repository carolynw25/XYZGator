{"ast":null,"code":"import _asyncToGenerator from \"/Users/carolynwang/XYZGatorGit/CEN3031Proj/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport { MathComponent } from './math.component';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\ndescribe('MathComponent', () => {\n  let component;\n  let fixture;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [MathComponent],\n      z\n    }).compileComponents();\n  }));\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MathComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should generate numbers for rows', () => {\n    component.generateNumbers();\n    expect(component.rows.length).toBeGreaterThan(0);\n  });\n  it('should initialize with correct default values', () => {\n    expect(component.minutes).toEqual(1);\n    expect(component.seconds).toEqual(0); //expect(component.timer).toBeUndefined();\n\n    expect(component.lowestTime).toBeNull();\n    expect(component.newRecord).toBeFalsy();\n    expect(component.rows.length).toEqual(3);\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n    expect(component.numClicked).toBeNull();\n    expect(component.numCorrect).toEqual(0);\n  });\n  it('should generate an array of numbers', () => {\n    component.generateNumbers(); //rows = 6? look into this\n\n    expect(component.rows.length).toEqual(6);\n    expect(component.rows[0].length).toEqual(10);\n    expect(component.rows[1].length).toEqual(10);\n    expect(component.rows[2].length).toEqual(10);\n  });\n  it('should reset the game', () => {\n    component.numCorrect = 5;\n    component.numClicked = 10;\n    component.number1 = 4;\n    component.number2 = 5;\n    component.minutes = 0;\n    component.seconds = 30;\n    component.reset();\n    expect(component.numCorrect).toEqual(0);\n    expect(component.numClicked).toEqual(10);\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n    expect(component.minutes).toEqual(1);\n    expect(component.seconds).toEqual(0);\n  });\n  it('should check the sum of clicked numbers', () => {\n    component.number1 = 2;\n    component.number2 = 3;\n    const clickedNumber = 5;\n    component.checkSum(clickedNumber);\n    expect(component.numCorrect).toEqual(1);\n    expect(component.numClicked).toBeNull();\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n  });\n  it('should check the sum of numbers on click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = null;\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(null); //component.checkSum(11);\n    //expect(component.numCorrect).toBe(1);\n    //expect(component.numClicked).toBe(11);\n    //component.checkSum(12);\n    //expect(component.numCorrect).toBe(2);\n    //expect(component.numClicked).toBe(null);\n  });\n  it('should display correct and incorrect numbers', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    fixture.detectChanges();\n    const numbers = fixture.debugElement.queryAll(By.css('.number'));\n    expect(numbers.length).toBe(component.rows.flat().length);\n    const correctNumber = component.number1 + component.number2;\n    const correctNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === correctNumber.toString());\n    correctNumberElement.nativeElement.click();\n    fixture.detectChanges(); //this will be needed if we decide to label things correct later on\n    //expect(correctNumberElement.nativeElement.classList).toContain('correct');\n\n    const incorrectNumber = component.rows.flat().find(num => num !== correctNumber);\n    const incorrectNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === incorrectNumber.toString());\n    incorrectNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(incorrectNumberElement.nativeElement.classList).toContain('incorrect');\n  });\n  it('should reset the game on reset button click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = 12;\n    component.numCorrect = 2;\n    spyOn(window, 'clearInterval');\n    component.reset(); //expect(component.numClicked).toBe(null);\n\n    expect(component.numCorrect).toBe(0);\n    expect(window.clearInterval).toHaveBeenCalled();\n  });\n  it('should navigate to \"/notifications\" when the return button is clicked', () => {\n    const navigateSpy = spyOn(TestBed.inject(Router), 'navigate');\n    const button = fixture.debugElement.nativeElement.querySelector('button');\n    button.click();\n    expect(navigateSpy).toHaveBeenCalledWith(['/notifications']);\n  });\n}); //Auto Generated\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n// import { MathComponent } from './math.component';\n// describe('MathComponent', () => {\n//   let component: MathComponent;\n//   let fixture: ComponentFixture<MathComponent>;\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       declarations: [ MathComponent ]\n//     })\n//     .compileComponents();\n//     fixture = TestBed.createComponent(MathComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });","map":{"version":3,"mappings":"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","names":["TestBed","By","MathComponent","Router","RouterTestingModule","describe","component","fixture","beforeEach","configureTestingModule","imports","declarations","z","compileComponents","createComponent","componentInstance","detectChanges","it","expect","toBeTruthy","generateNumbers","rows","length","toBeGreaterThan","minutes","toEqual","seconds","lowestTime","toBeNull","newRecord","toBeFalsy","number1","toBeDefined","number2","numClicked","numCorrect","reset","clickedNumber","checkSum","toBe","numbers","debugElement","queryAll","css","flat","correctNumber","correctNumberElement","find","num","nativeElement","textContent","trim","toString","click","incorrectNumber","incorrectNumberElement","classList","toContain","spyOn","window","clearInterval","toHaveBeenCalled","navigateSpy","inject","button","querySelector","toHaveBeenCalledWith"],"sourceRoot":"","sources":["/Users/carolynwang/XYZGatorGit/CEN3031Proj/src/app/math/math.component.spec.ts"],"sourcesContent":["\nimport { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { By } from '@angular/platform-browser';\nimport Swal from 'sweetalert2';\nimport { MathComponent } from './math.component';\nimport { Router } from '@angular/router';\nimport { RouterTestingModule } from '@angular/router/testing';\n\n\ndescribe('MathComponent', () => {\n  let component: MathComponent;\n  let fixture: ComponentFixture<MathComponent>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [RouterTestingModule],\n      declarations: [ MathComponent ]\n      z\n    })\n    .compileComponents();\n  });\n\n  beforeEach(() => {\n    fixture = TestBed.createComponent(MathComponent);\n    component = fixture.componentInstance;\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should generate numbers for rows', () => {\n    component.generateNumbers();\n    expect(component.rows.length).toBeGreaterThan(0);\n  });\n\n  it('should initialize with correct default values', () => {\n    expect(component.minutes).toEqual(1);\n    expect(component.seconds).toEqual(0);\n    //expect(component.timer).toBeUndefined();\n    expect(component.lowestTime).toBeNull();\n    expect(component.newRecord).toBeFalsy();\n    expect(component.rows.length).toEqual(3);\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n    expect(component.numClicked).toBeNull();\n    expect(component.numCorrect).toEqual(0);\n  });\n\n  it('should generate an array of numbers', () => {\n    component.generateNumbers();\n    //rows = 6? look into this\n    expect(component.rows.length).toEqual(6);\n    expect(component.rows[0].length).toEqual(10);\n    expect(component.rows[1].length).toEqual(10);\n    expect(component.rows[2].length).toEqual(10);\n  });\n\n  it('should reset the game', () => {\n    component.numCorrect = 5;\n    component.numClicked = 10;\n    component.number1 = 4;\n    component.number2 = 5;\n    component.minutes = 0;\n    component.seconds = 30;\n\n    component.reset();\n\n    expect(component.numCorrect).toEqual(0);\n    expect(component.numClicked).toEqual(10);\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n    expect(component.minutes).toEqual(1);\n    expect(component.seconds).toEqual(0);\n  });\n\n  it('should check the sum of clicked numbers', () => {\n    component.number1 = 2;\n    component.number2 = 3;\n    const clickedNumber = 5;\n\n    component.checkSum(clickedNumber);\n\n    expect(component.numCorrect).toEqual(1);\n    expect(component.numClicked).toBeNull();\n    expect(component.number1).toBeDefined();\n    expect(component.number2).toBeDefined();\n  });\n\n  it('should check the sum of numbers on click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = null;\n    component.checkSum(12);\n    expect(component.numCorrect).toBe(1);\n    expect(component.numClicked).toBe(null);\n    //component.checkSum(11);\n    //expect(component.numCorrect).toBe(1);\n    //expect(component.numClicked).toBe(11);\n    //component.checkSum(12);\n    //expect(component.numCorrect).toBe(2);\n    //expect(component.numClicked).toBe(null);\n  });\n\n  it('should display correct and incorrect numbers', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    fixture.detectChanges();\n    const numbers = fixture.debugElement.queryAll(By.css('.number'));\n    expect(numbers.length).toBe(component.rows.flat().length);\n    const correctNumber = component.number1 + component.number2;\n    const correctNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === correctNumber.toString());\n    correctNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    //this will be needed if we decide to label things correct later on\n    //expect(correctNumberElement.nativeElement.classList).toContain('correct');\n    const incorrectNumber = component.rows.flat().find(num => num !== correctNumber);\n    const incorrectNumberElement = numbers.find(num => num.nativeElement.textContent.trim() === incorrectNumber.toString());\n    incorrectNumberElement.nativeElement.click();\n    fixture.detectChanges();\n    expect(incorrectNumberElement.nativeElement.classList).toContain('incorrect');\n  });\n  \n  it('should reset the game on reset button click', () => {\n    component.number1 = 5;\n    component.number2 = 7;\n    component.numClicked = 12;\n    component.numCorrect = 2;\n    spyOn(window, 'clearInterval');\n    component.reset();\n    //expect(component.numClicked).toBe(null);\n    expect(component.numCorrect).toBe(0);\n    expect(window.clearInterval).toHaveBeenCalled();\n  });\n\n  it('should navigate to \"/notifications\" when the return button is clicked', () => {\n    const navigateSpy = spyOn(TestBed.inject(Router), 'navigate');\n    const button = fixture.debugElement.nativeElement.querySelector('button');\n    button.click();\n    expect(navigateSpy).toHaveBeenCalledWith(['/notifications']);\n  });\n\n\n\n\n});\n\n\n\n\n\n//Auto Generated\n// import { ComponentFixture, TestBed } from '@angular/core/testing';\n\n// import { MathComponent } from './math.component';\n\n// describe('MathComponent', () => {\n//   let component: MathComponent;\n//   let fixture: ComponentFixture<MathComponent>;\n\n//   beforeEach(async () => {\n//     await TestBed.configureTestingModule({\n//       declarations: [ MathComponent ]\n//     })\n//     .compileComponents();\n\n//     fixture = TestBed.createComponent(MathComponent);\n//     component = fixture.componentInstance;\n//     fixture.detectChanges();\n//   });\n\n//   it('should create', () => {\n//     expect(component).toBeTruthy();\n//   });\n// });\n"]},"metadata":{},"sourceType":"module"}