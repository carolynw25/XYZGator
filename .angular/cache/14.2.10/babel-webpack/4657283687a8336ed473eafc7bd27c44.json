{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UserIdService } from 'app/userIdService';\nimport { HttpClient } from '@angular/common/http';\nimport { take } from 'rxjs';\nlet DashboardComponent = class DashboardComponent {\n  constructor(userIDService, http) {\n    this.userIDService = userIDService;\n    this.http = http;\n    this.scoreMemory = 0;\n    this.lowestTimeMemory = null;\n    this.scoreMath = 0;\n    this.scoreWord = 0;\n    this.lowestTimeWord = null;\n    this.scorePicture = 0;\n  }\n\n  updateLowestTimeMemory(sec) {\n    if (sec >= 60) {\n      this.lowestTimeMemory = {\n        minutes: Math.floor(sec / 60),\n        seconds: sec % 60\n      };\n    } else {\n      this.lowestTimeMemory = {\n        minutes: 0,\n        seconds: sec\n      };\n    }\n  }\n\n  updateLowestTimeWord(sec) {\n    if (sec >= 60) {\n      this.lowestTimeWord = {\n        minutes: Math.floor(sec / 60),\n        seconds: sec % 60\n      };\n    } else {\n      this.lowestTimeWord = {\n        minutes: 0,\n        seconds: sec\n      };\n    }\n  }\n\n  getUserScoreMemory(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/matchscore';\n    return this.http.get(url);\n  }\n\n  getUserScoreMath(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/mathscore';\n    return this.http.get(url);\n  }\n\n  getUserScoreWord(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/wordscore';\n    return this.http.get(url);\n  }\n\n  getUserScorePicture(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/animalscore';\n    return this.http.get(url);\n  }\n\n  ngOnInit() {\n    this.userID = this.userIDService.getUserId();\n    console.log('User ID ohmygoditworked: ', this.userID); // Memory\n\n    this.getUserScoreMemory(this.userID).pipe(take(1) // take only the first value emitted by the observable\n    ).subscribe(score => {\n      if (score == 999999999999999) {\n        this.scoreMemory = null;\n      } else {\n        this.scoreMemory = score;\n        this.updateLowestTimeMemory(score);\n      }\n    }); // Math\n\n    this.getUserScoreMath(this.userID).pipe(take(1) // take only the first value emitted by the observable\n    ).subscribe(score => {\n      this.scoreMath = score;\n\n      if (this.scoreMath < 0) {\n        this.scoreMath = 0;\n      }\n    }); // Word Search\n\n    this.getUserScoreWord(this.userID).pipe(take(1) // take only the first value emitted by the observable\n    ).subscribe(score => {\n      if (score == 99999999999999999) {\n        this.scoreWord = null;\n      } else {\n        this.scoreWord = score;\n        this.updateLowestTimeWord(score);\n      }\n    }); // Picture\n\n    this.getUserScorePicture(this.userID).pipe(take(1) // take only the first value emitted by the observable\n    ).subscribe(score => {\n      this.scorePicture = score;\n\n      if (this.scorePicture < 0) {\n        this.scorePicture = 0;\n      }\n    });\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'dashboard-cmp',\n  moduleId: module.id,\n  templateUrl: 'dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n}), __metadata(\"design:paramtypes\", [UserIdService, HttpClient])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}