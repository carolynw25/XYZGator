{"ast":null,"code":"import { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nlet WordSearchComponent = class WordSearchComponent {\n  constructor(rows, cols, words) {\n    this.cols = cols;\n    this.words = words;\n  }\n\n  generate() {\n    const alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    this.puzzle = []; // Fill puzzle with random letters\n\n    for (let r = 0; r < this.rows; r++) {\n      const row = [];\n\n      for (let c = 0; c < this.cols; c++) {\n        row.push(alphabet.charAt(Math.floor(Math.random() * alphabet.length)));\n      }\n\n      this.puzzle.push(row);\n    } // Insert words\n\n\n    for (const word of this.words) {\n      let inserted = false; // Try to insert word horizontally\n\n      if (!inserted && word.length <= this.cols) {\n        for (let r = 0; r < this.rows; r++) {\n          for (let c = 0; c <= this.cols - word.length; c++) {\n            if (this.tryInsertWord(word, r, c, 0, 1)) {\n              inserted = true;\n              break;\n            }\n          }\n\n          if (inserted) {\n            break;\n          }\n        }\n      } // Try to insert word vertically\n\n\n      if (!inserted && word.length <= this.rows) {\n        for (let r = 0; r <= this.rows - word.length; r++) {\n          for (let c = 0; c < this.cols; c++) {\n            if (this.tryInsertWord(word, r, c, 1, 0)) {\n              inserted = true;\n              break;\n            }\n          }\n\n          if (inserted) {\n            break;\n          }\n        }\n      } // Try to insert word diagonally\n\n\n      if (!inserted && word.length <= this.rows && word.length <= this.cols) {\n        for (let r = 0; r <= this.rows - word.length; r++) {\n          for (let c = 0; c <= this.cols - word.length; c++) {\n            if (this.tryInsertWord(word, r, c, 1, 1)) {\n              inserted = true;\n              break;\n            }\n          }\n\n          if (inserted) {\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  tryInsertWord(word, row, col, dRow, dCol) {\n    for (let i = 0; i < word.length; i++) {\n      const r = row + i * dRow;\n      const c = col + i * dCol;\n\n      if (this.puzzle[r][c] !== undefined && this.puzzle[r][c] !== word.charAt(i)) {\n        return false;\n      }\n    } // Insert word\n\n\n    for (let i = 0; i < word.length; i++) {\n      const r = row + i * dRow;\n      const c = col + i * dCol;\n      this.puzzle[r][c] = word.charAt(i);\n    }\n\n    return true;\n  }\n\n};\nWordSearchComponent = __decorate([Component({\n  selector: 'app-word-search',\n  template: `\n<div class =\"outer\">\n <table (mouseup)=\"onMouseUp()\">\n   <tbody>\n     <tr *ngFor=\"let row of grid\">\n       <td\n         *ngFor=\"let letter of row; let colIdx = index\"\n         (mousedown)=\"selectWord(letter, i, colIdx)\"\n         [ngClass]=\"{ 'selected': isLetterSelected(i, colIdx), 'found': words.includes(getSelectedWord()) }\"\n       >\n         {{ letter }}\n       </td>\n     </tr>\n   </tbody>\n </table>\n\n\n <p>Find the following words:</p>\n <ul>\n   <li\n     *ngFor=\"let word of words\"\n     [ngClass]=\"{ 'selected': isLetterSelected(word), 'found': grid.flat().join('').includes(word) }\"\n     (click)=\"selectWord(word)\"\n   >\n     {{ word }}\n   </li>\n </ul>\n</div>\n`,\n  styles: [`\n .outer {\n   padding: 20px;\n   min-height: 100vh;\n   background-color: lavender;\n }\n table {\n   border-collapse: collapse;\n }\n\n\n td {\n   width: 30px;\n   height: 30px;\n   border: 1px solid black;\n   text-align: center;\n   font-size: 20px;\n   font-weight: bold;\n }\n\n\n li {\n   display: inline-block;\n   margin-right: 10px;\n   font-weight: bold;\n }\n `]\n}), __metadata(\"design:paramtypes\", [Number, Number, Array])], WordSearchComponent);\nexport { WordSearchComponent };","map":null,"metadata":{},"sourceType":"module"}