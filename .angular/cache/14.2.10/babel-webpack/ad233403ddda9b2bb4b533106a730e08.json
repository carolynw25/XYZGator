{"ast":null,"code":"var _a;\n\nimport { __decorate, __metadata } from \"tslib\";\nimport { Component } from '@angular/core';\nimport Chart from 'chart.js';\nimport { UserIdService } from 'app/userIdService';\nimport { take } from 'rxjs';\nlet DashboardComponent = class DashboardComponent {\n  constructor(userIDService, http) {\n    this.userIDService = userIDService;\n    this.http = http;\n    this.scoreMemory = 0;\n    this.scoreMath = 0;\n    this.scoreWord = 0;\n    this.scorePicture = 0;\n  }\n\n  getUserScoreMemory(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/matchscore';\n    return this.http.get(url);\n  }\n\n  getUserScoreMath(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/mathscore';\n    return this.http.get(url);\n  }\n\n  getUserScoreWord(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/wordscore';\n    return this.http.get(url);\n  }\n\n  getUserScorePicture(ID) {\n    const url = 'http://127.0.0.1:8080/api/users/' + ID + '/animalscore';\n    return this.http.get(url);\n  }\n\n  ngOnInit() {\n    //edits\n    //this.userID = localStorage.getItem('userID'); // retrieve the ID from localStorage\n    this.userID = this.userIDService.getUserId();\n    console.log('User ID bleh: ', this.userID);\n    this.userID = this.userIDService.getUserId();\n    console.log('User ID ohmygoditworked: ', this.userID); // Get the user's high score\n\n    this.getUserScore(this.userID).pipe(take(1) // take only the first value emitted by the observable\n    ).subscribe(score => {\n      this.highScore = score;\n\n      if (this.highScore < 0) {\n        this.highScore = 0;\n      }\n    });\n    this.chartColor = \"#FFFFFF\";\n    this.canvas = document.getElementById(\"chartHours\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.chartHours = new Chart(this.ctx, {\n      type: 'line',\n      data: {\n        labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\"],\n        datasets: [{\n          borderColor: \"#6bd098\",\n          backgroundColor: \"#6bd098\",\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          borderWidth: 3,\n          data: [300, 310, 316, 322, 330, 326, 333, 345, 338, 354]\n        }, {\n          borderColor: \"#f17e5d\",\n          backgroundColor: \"#f17e5d\",\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          borderWidth: 3,\n          data: [320, 340, 365, 360, 370, 385, 390, 384, 408, 420]\n        }, {\n          borderColor: \"#fcc468\",\n          backgroundColor: \"#fcc468\",\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          borderWidth: 3,\n          data: [370, 394, 415, 409, 425, 445, 460, 450, 478, 484]\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        tooltips: {\n          enabled: false\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              fontColor: \"#9f9f9f\",\n              beginAtZero: false,\n              maxTicksLimit: 5 //padding: 20\n\n            },\n            gridLines: {\n              drawBorder: false,\n              zeroLineColor: \"#ccc\",\n              color: 'rgba(255,255,255,0.05)'\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: 'rgba(255,255,255,0.1)',\n              zeroLineColor: \"transparent\",\n              display: false\n            },\n            ticks: {\n              padding: 20,\n              fontColor: \"#9f9f9f\"\n            }\n          }]\n        }\n      }\n    });\n    this.canvas = document.getElementById(\"chartEmail\");\n    this.ctx = this.canvas.getContext(\"2d\");\n    this.chartEmail = new Chart(this.ctx, {\n      type: 'pie',\n      data: {\n        labels: [1, 2, 3],\n        datasets: [{\n          label: \"Emails\",\n          pointRadius: 0,\n          pointHoverRadius: 0,\n          backgroundColor: ['#e3e3e3', '#4acccd', '#fcc468', '#ef8157'],\n          borderWidth: 0,\n          data: [342, 480, 530, 120]\n        }]\n      },\n      options: {\n        legend: {\n          display: false\n        },\n        pieceLabel: {\n          render: 'percentage',\n          fontColor: ['white'],\n          precision: 2\n        },\n        tooltips: {\n          enabled: false\n        },\n        scales: {\n          yAxes: [{\n            ticks: {\n              display: false\n            },\n            gridLines: {\n              drawBorder: false,\n              zeroLineColor: \"transparent\",\n              color: 'rgba(255,255,255,0.05)'\n            }\n          }],\n          xAxes: [{\n            barPercentage: 1.6,\n            gridLines: {\n              drawBorder: false,\n              color: 'rgba(255,255,255,0.1)',\n              zeroLineColor: \"transparent\"\n            },\n            ticks: {\n              display: false\n            }\n          }]\n        }\n      }\n    });\n    var speedCanvas = document.getElementById(\"speedChart\");\n    var dataFirst = {\n      data: [0, 19, 15, 20, 30, 40, 40, 50, 25, 30, 50, 70],\n      fill: false,\n      borderColor: '#fbc658',\n      backgroundColor: 'transparent',\n      pointBorderColor: '#fbc658',\n      pointRadius: 4,\n      pointHoverRadius: 4,\n      pointBorderWidth: 8\n    };\n    var dataSecond = {\n      data: [0, 5, 10, 12, 20, 27, 30, 34, 42, 45, 55, 63],\n      fill: false,\n      borderColor: '#51CACF',\n      backgroundColor: 'transparent',\n      pointBorderColor: '#51CACF',\n      pointRadius: 4,\n      pointHoverRadius: 4,\n      pointBorderWidth: 8\n    };\n    var speedData = {\n      labels: [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"],\n      datasets: [dataFirst, dataSecond]\n    };\n    var chartOptions = {\n      legend: {\n        display: false,\n        position: 'top'\n      }\n    };\n    var lineChart = new Chart(speedCanvas, {\n      type: 'line',\n      hover: false,\n      data: speedData,\n      options: chartOptions\n    });\n  }\n\n};\nDashboardComponent = __decorate([Component({\n  selector: 'dashboard-cmp',\n  moduleId: module.id,\n  templateUrl: 'dashboard.component.html'\n}), __metadata(\"design:paramtypes\", [UserIdService, typeof (_a = typeof HttpClient !== \"undefined\" && HttpClient) === \"function\" ? _a : Object])], DashboardComponent);\nexport { DashboardComponent };","map":null,"metadata":{},"sourceType":"module"}